// frontend/src/components/exercises/DialogExercise.jsx - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ó –ú–ò–¢–¢–Ñ–í–ò–ú –û–ù–û–í–õ–ï–ù–ù–Ø–ú –ü–†–û–ì–†–ï–°–£

import { useState, useEffect, useCallback } from "react";
import { useFlashcardStore } from "../../store/useFlashcardStore.js";
import { useUserSettingsStore } from "../../store/useUserSettingsStore.js";
import ExerciseLayout from "../shared/ExerciseLayout.jsx";
import DetailedCardInfo from "../shared/DetailedCardInfo.jsx";
import {
    MessageCircle, Loader, Users, CheckCircle,
    ChevronRight, BookOpen, Sparkles, Eye,
    ArrowRight, RefreshCw, AlertCircle
} from "lucide-react";

const DialogExercise = ({
                            rightOptionCard,
                            optionCards,
                            onExit,
                            progress = null,
                            isLastQuestion = false,
                            onRestart,
                            isProcessing = false,
                            onProgressUpdate = null // –î–û–î–ê–ù–û: Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                        }) => {
    const { generateInteractiveDialog } = useFlashcardStore();
    const { getDefaultEnglishLevel } = useUserSettingsStore();

    // –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–µ–π—Ç–∏
    const [dialogData, setDialogData] = useState(null);
    const [currentStep, setCurrentStep] = useState(0);
    const [selectedChoices, setSelectedChoices] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isGenerating, setIsGenerating] = useState(false);
    const [showResult, setShowResult] = useState(false);
    const [hasError, setHasError] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");
    const [canRetry, setCanRetry] = useState(true);
    const [internalProcessing, setInternalProcessing] = useState(false);

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–µ–π—Ç–∏ –¥–ª—è —Ç–∞–±—ñ–≤ –∑ 3 —Å–ª–æ–≤–∞–º–∏
    const [activeWordTab, setActiveWordTab] = useState(0);
    const [usedWords, setUsedWords] = useState([]);
    const [updatedCards, setUpdatedCards] = useState({});

    const combinedProcessing = isProcessing || internalProcessing;
    const englishLevel = getDefaultEnglishLevel();

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è reset —Å—Ç–∞–Ω—É
    const resetExerciseState = useCallback(() => {
        console.log(`üí¨ Resetting dialog exercise state`);

        setDialogData(null);
        setCurrentStep(0);
        setSelectedChoices([]);
        setIsLoading(true);
        setIsGenerating(false);
        setShowResult(false);
        setHasError(false);
        setErrorMessage("");
        setCanRetry(true);
        setInternalProcessing(false);
        setActiveWordTab(0);
        setUsedWords([]);
        setUpdatedCards({});
    }, []);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
    const generateDialogExercise = useCallback(async () => {
        if (!optionCards || optionCards.length < 3) {
            console.error("üí¨ Not enough cards for dialog");
            setHasError(true);
            setErrorMessage("–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–∞–ª–æ–≥—É");
            setCanRetry(false);
            setIsLoading(false);
            setIsGenerating(false);
            return;
        }

        setIsLoading(true);
        setIsGenerating(true);
        setHasError(false);
        setErrorMessage("");
        setShowResult(false);

        try {
            // –ë–µ—Ä–µ–º–æ rightOptionCard —è–∫ –æ—Å–Ω–æ–≤—É —ñ –¥–æ–¥–∞—î–º–æ —â–µ 2 –∫–∞—Ä—Ç–∫–∏
            let selectedCards = [];

            if (rightOptionCard) {
                selectedCards.push(rightOptionCard);

                // –î–æ–¥–∞—î–º–æ —â–µ 2 —Ä–∞–Ω–¥–æ–º–Ω—ñ –∫–∞—Ä—Ç–∫–∏ (—Ä—ñ–∑–Ω—ñ –≤—ñ–¥ rightOptionCard)
                const otherCards = optionCards.filter(card => card._id !== rightOptionCard._id);
                const shuffledOthers = otherCards.sort(() => Math.random() - 0.5);
                selectedCards.push(...shuffledOthers.slice(0, 2));
            } else {
                // Fallback: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 3 –∫–∞—Ä—Ç–∫–∏ –∞–±–æ —Ä–∞–Ω–¥–æ–º–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ 3
                const shuffledCards = [...optionCards].sort(() => Math.random() - 0.5);
                selectedCards = shuffledCards.slice(0, 3);
            }

            const wordsArray = selectedCards.map(card => card.text);

            console.log(`üí¨ Generating dialog with words:`, wordsArray);

            const result = await generateInteractiveDialog(wordsArray, englishLevel);

            if (!result || !result.title || !result.steps || !Array.isArray(result.steps)) {
                throw new Error("–®–Ü –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É");
            }

            if (result.steps.length < 2) {
                throw new Error("–î—ñ–∞–ª–æ–≥ –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –∫—Ä–æ–∫–∏");
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            result.steps.forEach((step, index) => {
                if (!step.text || !step.choices || !Array.isArray(step.choices)) {
                    throw new Error(`–ö—Ä–æ–∫ ${index + 1} –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
                }
                if (step.choices.length < 2) {
                    throw new Error(`–ö—Ä–æ–∫ ${index + 1} –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–±–æ—Ä—É`);
                }
            });

            console.log(`üí¨ Dialog generated successfully with ${result.steps.length} steps`);

            setUsedWords(selectedCards);
            setDialogData(result);

        } catch (error) {
            console.error("üí¨ Error generating dialog:", error);

            setHasError(true);

            if (error.response?.status === 401) {
                setErrorMessage("API –∫–ª—é—á –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.");
            } else if (error.response?.status === 402) {
                setErrorMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ OpenAI. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.");
            } else if (error.response?.status === 429) {
                setErrorMessage("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.");
            } else if (error.message?.includes("timeout")) {
                setErrorMessage("–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            } else if (error.message?.includes("–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")) {
                setErrorMessage("–®–Ü –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            } else {
                setErrorMessage("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–∞–ª–æ–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }

            setCanRetry(true);
            setDialogData(null);
        } finally {
            setIsLoading(false);
            setIsGenerating(false);
        }
    }, [generateInteractiveDialog, englishLevel, optionCards, rightOptionCard]);

    // –ï—Ñ–µ–∫—Ç –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    useEffect(() => {
        console.log("üí¨ DialogExercise effect triggered");

        if (rightOptionCard && optionCards && optionCards.length >= 3) {
            console.log(`üí¨ Dialog initialized with rightOptionCard: ${rightOptionCard.text}`);
            resetExerciseState();

            const timer = setTimeout(() => {
                generateDialogExercise();
            }, 100);

            return () => {
                clearTimeout(timer);
            };
        } else {
            console.log("üí¨ Insufficient data for dialog");
        }
    }, [rightOptionCard?._id, resetExerciseState, generateDialogExercise]);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
    const handleRetry = useCallback(() => {
        if (!canRetry) return;

        console.log("üí¨ Retrying dialog generation");
        resetExerciseState();

        const timer = setTimeout(() => {
            generateDialogExercise();
        }, 100);

        return () => clearTimeout(timer);
    }, [canRetry, resetExerciseState, generateDialogExercise]);

    // –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤ –¥—ñ–∞–ª–æ–∑—ñ
    const handleChoiceSelect = (choiceIndex) => {
        if (combinedProcessing) return;

        const newChoices = [...selectedChoices, choiceIndex];
        setSelectedChoices(newChoices);

        console.log(`üí¨ Choice selected for step ${currentStep}: ${choiceIndex}`);

        // –î–û–î–ê–ù–û: –ú–∏—Ç—Ç—î–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—É
        if (onProgressUpdate && progress) {
            const updatedProgress = {
                ...progress,
                correct: progress.correct + 1, // –£ –¥—ñ–∞–ª–æ–∑—ñ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ "–ø—Ä–∞–≤–∏–ª—å–Ω—ñ"
                currentAnswered: currentStep + 1 // –í—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫
            };
            onProgressUpdate(updatedProgress);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∞–±–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        if (currentStep < dialogData.steps.length - 1) {
            setTimeout(() => {
                setCurrentStep(prev => prev + 1);
            }, 1000);
        } else {
            // –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            setTimeout(() => {
                setShowResult(true);
            }, 1000);
        }
    };

    // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
    const handleContinue = useCallback(async () => {
        if (combinedProcessing || !dialogData) {
            console.log("üí¨ Cannot continue: processing in progress or missing data");
            return;
        }

        console.log("üí¨ Dialog completing successfully");
        setInternalProcessing(true);

        try {
            // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Å–ª–æ–≤–∞
            const allUsedWordIds = usedWords.map(word => word._id);

            console.log(`üí¨ –ü–µ—Ä–µ–¥–∞—î–º–æ ${allUsedWordIds.length} —Å–ª—ñ–≤ –¥–æ backend:`, usedWords.map(w => w.text));

            onExit({
                completed: true,
                isCorrect: true, // –î—ñ–∞–ª–æ–≥ –∑–∞–≤–∂–¥–∏ "–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π"
                rightOptionCard: {
                    ...rightOptionCard,
                    exerciseType: 'dialog'
                },
                usedWordIds: allUsedWordIds,
                allWordsData: usedWords.map(word => ({
                    _id: word._id,
                    text: word.text,
                    exerciseType: 'dialog',
                    isCorrect: true // –î—ñ–∞–ª–æ–≥ –∑–∞–≤–∂–¥–∏ —É—Å–ø—ñ—à–Ω–∏–π
                }))
            });
        } catch (error) {
            console.error("üí¨ Error processing dialog result:", error);

            // FALLBACK
            const fallbackWordIds = usedWords.map(word => word._id);

            onExit({
                completed: true,
                isCorrect: true,
                rightOptionCard: {
                    ...rightOptionCard,
                    exerciseType: 'dialog'
                },
                usedWordIds: fallbackWordIds,
                allWordsData: usedWords.map(word => ({
                    _id: word._id,
                    text: word.text,
                    exerciseType: 'dialog',
                    isCorrect: true
                }))
            });
        }
    }, [combinedProcessing, rightOptionCard, onExit, dialogData, usedWords]);

    // –§—É–Ω–∫—Ü—ñ—è restart
    const handleRestartExercise = useCallback(() => {
        if (combinedProcessing) {
            console.log("üí¨ Cannot restart: processing in progress");
            return;
        }

        console.log("üí¨ Restarting dialog exercise");

        if (onRestart && typeof onRestart === 'function') {
            onRestart();
        }
    }, [combinedProcessing, onRestart]);

    // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    const handleCardUpdate = useCallback((wordIndex, newCard) => {
        setUpdatedCards(prev => ({
            ...prev,
            [wordIndex]: newCard
        }));
    }, []);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∫–∞—Ä—Ç–æ–∫
    if (!optionCards || optionCards.length < 3) {
        return (
            <ExerciseLayout
                icon={MessageCircle}
                title="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥"
                description="–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π —à–ª—è—Ö —É —Ä–æ–∑–º–æ–≤—ñ"
                gradientClasses="from-indigo-400 to-purple-500"
                onExit={onExit}
                progress={progress}
                onRestart={handleRestartExercise}
                onContinue={handleContinue}
                isLastQuestion={isLastQuestion}
                showResult={showResult}
                isProcessing={combinedProcessing}
            >
                <div className="bg-white rounded-2xl shadow-md p-8">
                    <div className="text-center py-12">
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
                            <h3 className="text-lg font-semibold text-yellow-800 mb-2">
                                –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤
                            </h3>
                            <p className="text-yellow-700">
                                –î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 —Å–ª–æ–≤–∞.
                            </p>
                        </div>
                        <button
                            onClick={() => onExit({ completed: false })}
                            className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg"
                        >
                            –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                        </button>
                    </div>
                </div>
            </ExerciseLayout>
        );
    }

    return (
        <ExerciseLayout
            icon={MessageCircle}
            title="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥"
            description="–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π —à–ª—è—Ö —É —Ä–æ–∑–º–æ–≤—ñ —Ç–∞ –ø–æ–∫—Ä–∞—â—Ç–µ —á–∏—Ç–∞–Ω–Ω—è"
            gradientClasses="from-indigo-400 to-purple-500"
            onExit={onExit}
            progress={progress}
            onRestart={handleRestartExercise}
            onContinue={handleContinue}
            isLastQuestion={isLastQuestion}
            showResult={showResult}
            isProcessing={combinedProcessing}
        >
            {/* Main Content */}
            <div className="bg-white rounded-2xl shadow-md p-8 pb-10">
                {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ */}
                {hasError ? (
                    <div className="text-center py-12">
                        <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                        <h3 className="text-xl font-bold text-red-800 mb-4">
                            –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥—ñ–∞–ª–æ–≥—É
                        </h3>
                        <p className="text-red-600 mb-6 max-w-md mx-auto">
                            {errorMessage}
                        </p>

                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            {canRetry && (
                                <button
                                    onClick={handleRetry}
                                    disabled={isGenerating}
                                    className="bg-indigo-600 hover:bg-indigo-700 disabled:bg-indigo-400 disabled:cursor-not-allowed text-white py-3 px-6 rounded-lg font-medium transition-colors flex items-center justify-center"
                                >
                                    {isGenerating ? (
                                        <>
                                            <Loader className="w-5 h-5 mr-2 animate-spin" />
                                            –ì–µ–Ω–µ—Ä—É—é...
                                        </>
                                    ) : (
                                        <>
                                            <RefreshCw className="w-5 h-5 mr-2" />
                                            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                                        </>
                                    )}
                                </button>
                            )}

                            <button
                                onClick={() => onExit({ completed: false })}
                                className="bg-gray-500 hover:bg-gray-600 text-white py-3 px-6 rounded-lg font-medium transition-colors"
                            >
                                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                            </button>
                        </div>
                    </div>
                ) : isLoading ? (
                    <div className="text-center py-12">
                        <Loader className="w-8 h-8 animate-spin mx-auto mb-4 text-indigo-600" />
                        <p className="text-gray-600">
                            {isGenerating ? "–ì–µ–Ω–µ—Ä—É—é —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥..." : "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}
                        </p>
                    </div>
                ) : showResult ? (
                    /* Results Screen */
                    <div className="text-center py-12">
                        <div className="mb-8">
                            <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                            <h2 className="text-2xl font-bold text-gray-900 mb-4">
                                –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
                            </h2>
                            <p className="text-gray-600 mb-6 max-w-md mx-auto">
                                –ß—É–¥–æ–≤–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —ñ –ø–æ–∫—Ä–∞—â–∏–ª–∏ –Ω–∞–≤–∏—á–∫–∏ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
                            </p>
                        </div>

                        {/* Summary */}
                        <div className="bg-indigo-50 rounded-xl p-6 mb-8 max-w-md mx-auto">
                            <h3 className="text-lg font-semibold text-indigo-800 mb-4">
                                –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            </h3>
                            <div className="grid grid-cols-3 gap-4 text-sm">
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-indigo-600">
                                        {dialogData?.steps?.length || 0}
                                    </div>
                                    <div className="text-gray-600">–ö—Ä–æ–∫—ñ–≤</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-indigo-600">3</div>
                                    <div className="text-gray-600">–°–ª—ñ–≤</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-2xl font-bold text-indigo-600">100%</div>
                                    <div className="text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                                </div>
                            </div>
                        </div>

                        {/* Dialog Summary */}
                        {dialogData && (
                            <div className="bg-white border border-indigo-200 rounded-xl p-6 text-left max-w-2xl mx-auto">
                                <h4 className="text-lg font-semibold text-indigo-800 mb-4 text-center">
                                    "{dialogData.title}"
                                </h4>
                                <div className="space-y-3">
                                    {dialogData.steps.map((step, index) => (
                                        <div key={index} className="flex items-start">
                                            <div className="bg-indigo-100 text-indigo-600 w-6 h-6 rounded-full flex items-center justify-center font-bold mr-3 mt-0.5 flex-shrink-0 text-sm">
                                                {index + 1}
                                            </div>
                                            <div className="flex-1">
                                                <p className="text-gray-800 mb-1">{step.text}</p>
                                                {selectedChoices[index] !== undefined && (
                                                    <p className="text-indigo-600 text-sm font-medium">
                                                        ‚û§ {step.choices[selectedChoices[index]]}
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                ) : (
                    /* Dialog Steps */
                    <div>
                        {/* Progress Indicator */}
                        <div className="flex justify-center mb-8">
                            <div className="flex items-center space-x-2">
                                {dialogData?.steps?.map((_, index) => (
                                    <div key={index} className="flex items-center">
                                        <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${
                                            index < currentStep ? 'bg-green-500 text-white' :
                                                index === currentStep ? 'bg-indigo-500 text-white' :
                                                    'bg-gray-200 text-gray-500'
                                        }`}>
                                            {index + 1}
                                        </div>
                                        {index < dialogData.steps.length - 1 && (
                                            <div className={`w-8 h-0.5 ${
                                                index < currentStep ? 'bg-green-500' : 'bg-gray-200'
                                            }`} />
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Dialog Title */}
                        {dialogData?.title && (
                            <div className="text-center mb-8">
                                <h2 className="text-xl font-bold text-gray-900 mb-2">
                                    {dialogData.title}
                                </h2>
                                <p className="text-gray-600 text-sm">
                                    –ö—Ä–æ–∫ {currentStep + 1} –∑ {dialogData.steps.length}
                                </p>
                            </div>
                        )}

                        {/* Current Step */}
                        {dialogData?.steps && dialogData.steps[currentStep] && (
                            <div className="max-w-3xl mx-auto">
                                {/* Step Text */}
                                <div className="bg-indigo-50 rounded-xl p-6 mb-8 border-l-4 border-indigo-400">
                                    <div className="flex items-start">
                                        <Users className="w-6 h-6 text-indigo-500 mr-3 mt-1 flex-shrink-0" />
                                        <p className="text-lg text-gray-800 leading-relaxed">
                                            {dialogData.steps[currentStep].text}
                                        </p>
                                    </div>
                                </div>

                                {/* Choices */}
                                <div className="space-y-3">
                                    <h3 className="text-lg font-medium text-gray-700 mb-4 text-center">
                                        –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
                                    </h3>
                                    {dialogData.steps[currentStep].choices.map((choice, index) => (
                                        <button
                                            key={index}
                                            onClick={() => handleChoiceSelect(index)}
                                            disabled={combinedProcessing}
                                            className={`w-full p-4 text-left rounded-xl border-2 transition-all duration-200 font-medium ${
                                                combinedProcessing
                                                    ? 'border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed'
                                                    : 'border-indigo-200 hover:border-indigo-300 hover:bg-indigo-50 text-gray-700 hover:shadow-lg cursor-pointer'
                                            }`}
                                        >
                                            <div className="flex items-center">
                                                <div className="bg-indigo-100 text-indigo-600 w-6 h-6 rounded-full flex items-center justify-center font-bold mr-3 flex-shrink-0 text-sm">
                                                    {String.fromCharCode(65 + index)}
                                                </div>
                                                <span className="flex-1">{choice}</span>
                                                <ChevronRight className="w-5 h-5 text-indigo-400" />
                                            </div>
                                        </button>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {/* Words Info - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É */}
            {showResult && usedWords.length > 0 && (
                <div className="bg-white rounded-2xl shadow-md overflow-hidden mb-6">
                    <div className="px-6 py-4 border-b border-gray-200">
                        <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                            <BookOpen className="w-5 h-5 mr-2 text-indigo-600" />
                            –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ª–æ–≤–∞ —É –¥—ñ–∞–ª–æ–∑—ñ
                        </h3>
                        <p className="text-sm text-gray-600 mt-1">
                            –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ
                        </p>
                    </div>

                    {/* –¢–∞–±–∏ –¥–ª—è —Å–ª—ñ–≤ */}
                    <div className="border-b border-gray-200">
                        <div className="flex">
                            {usedWords.map((word, index) => (
                                <button
                                    key={word._id}
                                    onClick={() => setActiveWordTab(index)}
                                    className={`px-6 py-4 font-medium text-sm border-b-2 transition-colors ${
                                        activeWordTab === index
                                            ? 'border-indigo-500 text-indigo-600 bg-indigo-50'
                                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                    }`}
                                >
                                    {word.text}
                                    <span className="ml-2 text-xs opacity-60">
                                        ({index + 1})
                                    </span>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±—É */}
                    {usedWords[activeWordTab] && (
                        <DetailedCardInfo
                            displayCard={updatedCards[activeWordTab] || usedWords[activeWordTab]}
                            onCardUpdate={(newCard) => handleCardUpdate(activeWordTab, newCard)}
                            isCorrect={true} // –î—ñ–∞–ª–æ–≥ –∑–∞–≤–∂–¥–∏ "–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π"
                        />
                    )}
                </div>
            )}
        </ExerciseLayout>
    );
};

export default DialogExercise;