// frontend/src/components/exercises/ReadingComprehensionExercise.jsx - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ë–ï–ó –ü–û–í–¢–û–†–Ü–í –°–õ–Ü–í

import { useState, useEffect, useCallback } from "react";
import { useFlashcardStore } from "../../store/useFlashcardStore.js";
import { useUserSettingsStore } from "../../store/useUserSettingsStore.js";
import ExerciseLayout from "../shared/ExerciseLayout.jsx";
import DetailedCardInfo from "../shared/DetailedCardInfo.jsx";
import {
    CheckCircle, XCircle, BookOpen, Loader, FileText,
    Sparkles, Eye, Target, AlertCircle, RefreshCw
} from "lucide-react";

const ReadingComprehensionExercise = ({
                                          rightOptionCard,
                                          optionCards, // –í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É 3 —Å–ª—ñ–≤
                                          onExit,
                                          progress = null,
                                          isLastQuestion = false,
                                          onRestart,
                                          isProcessing = false,
                                          onProgressUpdate = null,
                                          sessionUsedWordIds = [] // –î–û–î–ê–ù–û: ID —Å–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Å–µ—Å—ñ—ó
                                      }) => {
    const { generateFieldContent, getFlashcards } = useFlashcardStore();
    const { getDefaultEnglishLevel } = useUserSettingsStore();

    // –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–µ–π—Ç–∏
    const [readingData, setReadingData] = useState(null);
    const [selectedAnswer, setSelectedAnswer] = useState(null);
    const [isCorrect, setIsCorrect] = useState(null);
    const [showResult, setShowResult] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [isGenerating, setIsGenerating] = useState(false);
    const [hasError, setHasError] = useState(false);
    const [errorMessage, setErrorMessage] = useState("");
    const [canRetry, setCanRetry] = useState(true);
    const [internalProcessing, setInternalProcessing] = useState(false);

    // –î–û–î–ê–ù–û: –°—Ç–µ–π—Ç–∏ –¥–ª—è —Ç–∞–±—ñ–≤ –∑ 3 —Å–ª–æ–≤–∞–º–∏
    const [activeWordTab, setActiveWordTab] = useState(0);
    const [usedWords, setUsedWords] = useState([]); // –°–ª–æ–≤–∞ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ
    const [updatedCards, setUpdatedCards] = useState({}); // –û–Ω–æ–≤–ª–µ–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞

    const combinedProcessing = isProcessing || internalProcessing;
    const englishLevel = getDefaultEnglishLevel();

    // –°–ª–æ–≤–Ω–∏–∫ —Ç–∏–ø—ñ–≤ —Ç–µ–∫—Å—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const textTypeNames = {
        documentary: "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π",
        story: "–û–ø–æ–≤—ñ–¥–∞–Ω–Ω—è",
        news: "–ù–æ–≤–∏–Ω–∏",
        article: "–°—Ç–∞—Ç—Ç—è",
        blog: "–ë–ª–æ–≥",
        scientific: "–ù–∞—É–∫–æ–≤–∞ —Å—Ç–∞—Ç—Ç—è",
        announcement: "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è",
        advertisement: "–†–µ–∫–ª–∞–º–∞",
        instruction: "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è",
        'review on product / video / post etc': "–í—ñ–¥–≥—É–∫",
        letter: "–õ–∏—Å—Ç",
        report: "–ó–≤—ñ—Ç",
        documentation: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è",
        interview: "–Ü–Ω—Ç–µ—Ä–≤'—é",
        speech: "–ü—Ä–æ–º–æ–≤–∞",
        comment: "–ö–æ–º–µ–Ω—Ç–∞—Ä",
        'social media post': "–ü–æ—Å—Ç —É —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö"
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è reset —Å—Ç–∞–Ω—É
    const resetExerciseState = useCallback(() => {
        console.log(`üìñ Resetting reading comprehension state`);

        setReadingData(null);
        setSelectedAnswer(null);
        setIsCorrect(null);
        setShowResult(false);
        setIsLoading(true);
        setIsGenerating(false);
        setHasError(false);
        setErrorMessage("");
        setCanRetry(true);
        setInternalProcessing(false);
        setActiveWordTab(0);
        setUsedWords([]);
        setUpdatedCards({});
    }, []);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–±–∑–∞—Ü—ñ–≤
    const processTextContent = (text, usedWords) => {
        if (!text) return '';

        let processedText = text;

        // –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ —Å–ª–æ–≤–∞ —è–∫—â–æ —î
        if (usedWords && usedWords.length > 0) {
            usedWords.forEach((word, index) => {
                if (word && word.trim()) {
                    const colorClasses = [
                        'bg-blue-200 text-blue-800',
                        'bg-green-200 text-green-800',
                        'bg-purple-200 text-purple-800'
                    ];
                    const colorClass = colorClasses[index] || 'bg-yellow-200 text-yellow-800';

                    const wordPattern = new RegExp('\\b' + word.trim().replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + '\\b', 'gi');
                    processedText = processedText.replace(wordPattern, `<mark class="${colorClass} px-1 py-0.5 rounded font-semibold">${word.trim()}</mark>`);
                }
            });
        }

        // –û–±—Ä–æ–±–ª—è—î–º–æ –∞–±–∑–∞—Ü–∏
        processedText = processedText.replace(/\n\n/g, '</p><p class="mb-4 last:mb-0">');
        processedText = `<p class="mb-4 last:mb-0">${processedText}</p>`;

        return processedText;
    };

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    const findCardsForUsedWords = useCallback((usedWordsFromText) => {
        if (!usedWordsFromText || !optionCards) {
            console.log("‚ùå findCardsForUsedWords: Missing data", { usedWordsFromText, optionCards: optionCards?.length });
            return [];
        }

        console.log(`üîç Finding cards for ${usedWordsFromText.length} used words:`, usedWordsFromText);
        console.log(`üîç Available option cards: ${optionCards.length}`);

        const foundCards = [];

        usedWordsFromText.forEach((usedWord, index) => {
            console.log(`üîç Processing word ${index + 1}: "${usedWord}"`);

            // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –ø–æ—à—É–∫—É
            let matchingCard = null;

            // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 1: –¢–æ—á–Ω–∏–π –∑–±—ñ–≥
            matchingCard = optionCards.find(card =>
                card.text.toLowerCase().trim() === usedWord.toLowerCase().trim()
            );

            if (!matchingCard) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è (used word –º—ñ—Å—Ç–∏—Ç—å text –∫–∞—Ä—Ç–∫–∏)
                matchingCard = optionCards.find(card =>
                    usedWord.toLowerCase().includes(card.text.toLowerCase().trim())
                );
            }

            if (!matchingCard) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è (text –∫–∞—Ä—Ç–∫–∏ –º—ñ—Å—Ç–∏—Ç—å used word)
                matchingCard = optionCards.find(card =>
                    card.text.toLowerCase().includes(usedWord.toLowerCase().trim())
                );
            }

            if (!matchingCard) {
                // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ —Å–ª–æ–≤–∞—Ö (—è–∫—â–æ used word —Å–∫–ª–∞–¥–Ω–∏–π)
                const usedWordParts = usedWord.toLowerCase().split(/\s+/);
                matchingCard = optionCards.find(card => {
                    const cardTextLower = card.text.toLowerCase();
                    return usedWordParts.some(part =>
                        part.length > 2 && cardTextLower.includes(part)
                    );
                });
            }

            if (matchingCard && !foundCards.find(c => c._id === matchingCard._id)) {
                foundCards.push(matchingCard);
                console.log(`‚úÖ Found match for "${usedWord}": "${matchingCard.text}" (ID: ${matchingCard._id})`);
            } else if (!matchingCard) {
                console.warn(`‚ùå No match found for word: "${usedWord}"`);

                // FALLBACK: –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É, –º–æ–∂–µ–º–æ –≤–∑—è—Ç–∏ –ø–µ—Ä—à—É –¥–æ—Å—Ç—É–ø–Ω—É –∫–∞—Ä—Ç–∫—É
                // –¶–µ –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ –Ω—ñ–∂ –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤
                const fallbackCard = optionCards.find(card =>
                    !foundCards.find(c => c._id === card._id)
                );

                if (fallbackCard) {
                    foundCards.push(fallbackCard);
                    console.warn(`‚ö†Ô∏è Using fallback card for "${usedWord}": "${fallbackCard.text}" (ID: ${fallbackCard._id})`);
                }
            }
        });

        console.log(`üéØ Final result: Found ${foundCards.length} cards:`, foundCards.map(c => c.text));

        return foundCards;
    }, [optionCards]);

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è reading comprehension –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–µ—Å—ñ–π–Ω–∏—Ö excludeIds
    const generateReadingExercise = useCallback(async () => {
        if (!optionCards || optionCards.length < 3) {
            console.error("üìñ Not enough cards for reading comprehension");
            setHasError(true);
            setErrorMessage("–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É");
            setCanRetry(false);
            setIsLoading(false);
            setIsGenerating(false);
            return;
        }

        setIsLoading(true);
        setIsGenerating(true);
        setHasError(false);
        setErrorMessage("");
        setShowResult(false);

        try {
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ–π–Ω–∏—Ö excludeIds
            console.log(`üìñ Session used word IDs:`, sessionUsedWordIds);

            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ä—Ç–∫–∏, –≤–∏–∫–ª—é—á–∞—é—á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –≤ —Å–µ—Å—ñ—ó
            const availableCards = optionCards.filter(card =>
                !sessionUsedWordIds.includes(card._id)
            );

            console.log(`üìñ Available cards after session filtering: ${availableCards.length}/${optionCards.length}`);

            if (availableCards.length < 3) {
                console.warn(`üìñ Not enough unused cards: ${availableCards.length} < 3`);
                setHasError(true);
                setErrorMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (–¥–æ—Å—Ç—É–ø–Ω–æ ${availableCards.length}, –ø–æ—Ç—Ä—ñ–±–Ω–æ 3)`);
                setCanRetry(false);
                setIsLoading(false);
                setIsGenerating(false);
                return;
            }

            // –í–∏–±–∏—Ä–∞—î–º–æ 3 –∫–∞—Ä—Ç–∫–∏ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö
            const shuffledCards = [...availableCards].sort(() => Math.random() - 0.5);
            const selectedCards = shuffledCards.slice(0, 3);

            const wordsString = selectedCards.map(card => card.text).join(', ');

            console.log(`üìñ Generating reading comprehension with available words: ${wordsString}`);

            const result = await generateFieldContent(
                wordsString,
                englishLevel,
                "readingComprehension"
            );

            if (!result || !result.text || !result.facts || !Array.isArray(result.facts)) {
                throw new Error("–®–Ü –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è reading comprehension");
            }

            if (result.facts.length !== 3) {
                throw new Error("Reading comprehension –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏ —Ä—ñ–≤–Ω–æ 3 —Ñ–∞–∫—Ç–∏");
            }

            if (!Array.isArray(result.usedWords) || result.usedWords.length !== 3) {
                throw new Error("Reading comprehension –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–≤–Ω–æ 3 —Å–ª–æ–≤–∞");
            }

            if (typeof result.correctOption !== 'number' || result.correctOption < 0 || result.correctOption > 2) {
                throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
            }

            console.log(`üìñ Reading comprehension generated successfully`);

            // –î–û–î–ê–ù–û: –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è debug
            console.log(`üìñ AI Response details:`);
            console.log(`   Text type: ${result.textType}`);
            console.log(`   Text length: ${result.text.length} characters`);
            console.log(`   Facts count: ${result.facts.length}`);
            console.log(`   Used words from AI: [${result.usedWords.join(', ')}]`);
            console.log(`   Correct option: ${result.correctOption}`);

            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ selectedCards –∑–∞–º—ñ—Å—Ç—å –ø–æ—à—É–∫—É
            console.log(`üìñ Using selected cards directly:`, selectedCards.map(c => ({ id: c._id, text: c.text })));

            setUsedWords(selectedCards);
            setReadingData(result);

        } catch (error) {
            console.error("üìñ Error generating reading comprehension:", error);

            setHasError(true);

            if (error.response?.status === 401) {
                setErrorMessage("API –∫–ª—é—á –Ω–µ–¥—ñ–π—Å–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.");
            } else if (error.response?.status === 402) {
                setErrorMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫—Ä–µ–¥–∏—Ç—ñ–≤ OpenAI. –ü–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å.");
            } else if (error.response?.status === 429) {
                setErrorMessage("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.");
            } else if (error.message?.includes("timeout")) {
                setErrorMessage("–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            } else if (error.message?.includes("–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ")) {
                setErrorMessage("–®–Ü –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            } else {
                setErrorMessage("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }

            setCanRetry(true);
            setReadingData(null);
        } finally {
            setIsLoading(false);
            setIsGenerating(false);
        }
    }, [generateFieldContent, englishLevel, optionCards, sessionUsedWordIds]);

    // –ï—Ñ–µ–∫—Ç –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    useEffect(() => {
        console.log("üìñ ReadingComprehensionExercise effect triggered");

        if (rightOptionCard && optionCards && optionCards.length >= 3) {
            console.log(`üìñ Reading comprehension initialized with rightOptionCard: ${rightOptionCard.text}`);
            console.log(`üìñ Session used words count: ${sessionUsedWordIds.length}`);
            resetExerciseState();

            const timer = setTimeout(() => {
                generateReadingExercise();
            }, 100);

            return () => {
                clearTimeout(timer);
            };
        } else {
            console.log("üìñ Insufficient data for reading comprehension");
        }
    }, [rightOptionCard?._id, resetExerciseState, generateReadingExercise, sessionUsedWordIds]);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏
    const handleRetry = useCallback(() => {
        if (!canRetry) return;

        console.log("üìñ Retrying reading comprehension generation");
        resetExerciseState();

        const timer = setTimeout(() => {
            generateReadingExercise();
        }, 100);

        return () => clearTimeout(timer);
    }, [canRetry, resetExerciseState, generateReadingExercise]);

    // –§—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const handleAnswerSelect = (answerIndex) => {
        if (selectedAnswer !== null || combinedProcessing) return;

        const correct = answerIndex === readingData.correctOption;
        setSelectedAnswer(answerIndex);
        setIsCorrect(correct);
        setShowResult(true);

        // –î–û–î–ê–ù–û: –ú–∏—Ç—Ç—î–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        if (onProgressUpdate && progress) {
            const updatedProgress = {
                ...progress,
                correct: progress.correct + (correct ? 1 : 0),
                currentAnswered: progress.current // –í—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
            };
            onProgressUpdate(updatedProgress);
        }

        console.log(`üìñ Answer selected: index ${answerIndex}, correct: ${correct}`);
    };

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º store
    const handleContinue = useCallback(async () => {
        if (combinedProcessing || !readingData) {
            console.log("üìñ Cannot continue: processing in progress or missing data");
            return;
        }

        console.log("üìñ Reading comprehension completing with result:", isCorrect);
        setInternalProcessing(true);

        try {
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –í–°–Ü–• 3 –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Å–ª—ñ–≤
            const allUsedWordIds = usedWords.map(word => word._id);

            // –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é
            if (allUsedWordIds.length !== 3) {
                console.warn(`‚ö†Ô∏è Expected 3 words, but got ${allUsedWordIds.length} words!`);
                console.warn(`‚ö†Ô∏è Used words:`, usedWords.map(w => ({ id: w._id, text: w.text })));
            }

            console.log(`üìñ –ü–µ—Ä–µ–¥–∞—î–º–æ ${allUsedWordIds.length} —Å–ª—ñ–≤ –¥–æ backend:`, usedWords.map(w => w.text));
            console.log(`üìñ IDs –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ:`, allUsedWordIds);

            // –î–û–î–ê–ù–û: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —â–æ –≤—Å—ñ ID —î –≤–∞–ª—ñ–¥–Ω–∏–º–∏
            const invalidIds = allUsedWordIds.filter(id => !id || typeof id !== 'string');
            if (invalidIds.length > 0) {
                console.error(`‚ùå Invalid IDs detected:`, invalidIds);
                throw new Error(`Invalid word IDs: ${invalidIds.join(', ')}`);
            }

            // –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ store –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º —â–æ–± —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω
            console.log(`üìñ Refreshing flashcards to sync with backend changes`);
            try {
                await getFlashcards();
                console.log(`‚úÖ Flashcards refreshed successfully`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è Failed to refresh flashcards:`, error);
            }

            onExit({
                completed: true,
                isCorrect: isCorrect,
                rightOptionCard: {
                    ...rightOptionCard,
                    exerciseType: 'reading-comprehension'
                },
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ ID –í–°–Ü–• –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Å–ª—ñ–≤ (–Ω–µ —Ç—ñ–ª—å–∫–∏ rightOptionCard)
                usedWordIds: allUsedWordIds,
                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                allWordsData: usedWords.map(word => ({
                    _id: word._id,
                    text: word.text,
                    exerciseType: 'reading-comprehension',
                    isCorrect: isCorrect // –í—Å—ñ —Å–ª–æ–≤–∞ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                })),
                // –î–û–î–ê–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ ID –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
                newSessionUsedWordIds: [...sessionUsedWordIds, ...allUsedWordIds]
            });
        } catch (error) {
            console.error("üìñ Error processing exercise result:", error);

            // FALLBACK: –£ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤—Å–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—ñ —Å–ª–æ–≤–∞
            const fallbackWordIds = usedWords.map(word => word._id);

            onExit({
                completed: true,
                isCorrect: isCorrect,
                rightOptionCard: {
                    ...rightOptionCard,
                    exerciseType: 'reading-comprehension'
                },
                usedWordIds: fallbackWordIds,
                allWordsData: usedWords.map(word => ({
                    _id: word._id,
                    text: word.text,
                    exerciseType: 'reading-comprehension',
                    isCorrect: isCorrect
                })),
                newSessionUsedWordIds: [...sessionUsedWordIds, ...fallbackWordIds]
            });
        }
    }, [combinedProcessing, isCorrect, rightOptionCard, onExit, readingData, usedWords, sessionUsedWordIds, getFlashcards]);

    // –§—É–Ω–∫—Ü—ñ—è restart
    const handleRestartExercise = useCallback(() => {
        if (combinedProcessing) {
            console.log("üìñ Cannot restart: processing in progress");
            return;
        }

        console.log("üìñ Restarting reading comprehension exercise");

        if (onRestart && typeof onRestart === 'function') {
            onRestart();
        }
    }, [combinedProcessing, onRestart]);

    // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
    const handleCardUpdate = useCallback((wordIndex, newCard) => {
        setUpdatedCards(prev => ({
            ...prev,
            [wordIndex]: newCard
        }));
    }, []);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∫–∞—Ä—Ç–æ–∫
    if (!optionCards || optionCards.length < 3) {
        return (
            <ExerciseLayout
                icon={BookOpen}
                title="–†–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–≥–æ"
                description="–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–∫—Ç"
                gradientClasses="from-emerald-400 to-teal-400"
                onExit={onExit}
                progress={progress}
                onRestart={handleRestartExercise}
                onContinue={handleContinue}
                isLastQuestion={isLastQuestion}
                showResult={showResult}
                isProcessing={combinedProcessing}
            >
                <div className="bg-white rounded-2xl shadow-md p-8">
                    <div className="text-center py-12">
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
                            <h3 className="text-lg font-semibold text-yellow-800 mb-2">
                                –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤
                            </h3>
                            <p className="text-yellow-700">
                                –î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 —Å–ª–æ–≤–∞.
                            </p>
                        </div>
                        <button
                            onClick={() => onExit({ completed: false })}
                            className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg"
                        >
                            –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                        </button>
                    </div>
                </div>
            </ExerciseLayout>
        );
    }

    return (
        <ExerciseLayout
            icon={BookOpen}
            title="–†–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–≥–æ"
            description="–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–∫—Ç"
            gradientClasses="from-emerald-400 to-teal-400"
            onExit={onExit}
            progress={progress}
            onRestart={handleRestartExercise}
            onContinue={handleContinue}
            isLastQuestion={isLastQuestion}
            showResult={showResult}
            isProcessing={combinedProcessing}
        >
            {/* Question Content */}
            <div className="bg-white rounded-2xl shadow-md p-8 pb-10">
                {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ */}
                {hasError ? (
                    <div className="text-center py-12">
                        <AlertCircle className="w-16 h-16 text-red-500 mx-auto mb-4" />
                        <h3 className="text-xl font-bold text-red-800 mb-4">
                            –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É
                        </h3>
                        <p className="text-red-600 mb-6 max-w-md mx-auto">
                            {errorMessage}
                        </p>

                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            {canRetry && (
                                <button
                                    onClick={handleRetry}
                                    disabled={isGenerating}
                                    className="bg-emerald-600 hover:bg-emerald-700 disabled:bg-emerald-400 disabled:cursor-not-allowed text-white py-3 px-6 rounded-lg font-medium transition-colors flex items-center justify-center"
                                >
                                    {isGenerating ? (
                                        <>
                                            <Loader className="w-5 h-5 mr-2 animate-spin" />
                                            –ì–µ–Ω–µ—Ä—É—é...
                                        </>
                                    ) : (
                                        <>
                                            <RefreshCw className="w-5 h-5 mr-2" />
                                            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
                                        </>
                                    )}
                                </button>
                            )}

                            <button
                                onClick={() => onExit({ completed: false })}
                                className="bg-gray-500 hover:bg-gray-600 text-white py-3 px-6 rounded-lg font-medium transition-colors"
                            >
                                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                            </button>
                        </div>
                    </div>
                ) : isLoading ? (
                    <div className="text-center py-12">
                        <Loader className="w-8 h-8 animate-spin mx-auto mb-4 text-emerald-600" />
                        <p className="text-gray-600">
                            {isGenerating ? "–ì–µ–Ω–µ—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è..." : "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."}
                        </p>
                    </div>
                ) : (
                    <>
                        {/* Text Type and Instructions */}
                        <div className="text-center mb-6">
                            <div className="flex items-center justify-center mb-4">
                                <FileText className="w-6 h-6 text-emerald-600 mr-2" />
                                <span className="text-sm font-medium text-emerald-600 bg-emerald-50 px-3 py-1 rounded-full">
                                    {textTypeNames[readingData?.textType] || "–¢–µ–∫—Å—Ç"}
                                </span>
                            </div>
                            <h2 className="text-lg font-medium text-gray-700 mb-2 border-b border-emerald-400 mx-30 pb-1">
                                –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–∞–∂–Ω–æ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–∫—Ç
                            </h2>
                        </div>

                        {/* Reading Text */}
                        <div className="bg-white rounded-xl p-6 mb-8 border-l-4 border-emerald-400">
                            <div className="text-lg leading-relaxed text-gray-800">
                                <div
                                    dangerouslySetInnerHTML={{
                                        __html: processTextContent(readingData?.text, readingData?.usedWords)
                                    }}
                                />
                            </div>
                        </div>

                        {/* Answer Options */}
                        <div className="space-y-4 max-w-4xl mx-auto">
                            {readingData?.facts.map((fact, index) => {
                                let buttonClass = "w-full p-6 text-left rounded-xl border-2 transition-all duration-200 font-medium text-base ";

                                if (selectedAnswer === null) {
                                    buttonClass += combinedProcessing
                                        ? "border-gray-200 bg-gray-50 text-gray-500 cursor-not-allowed"
                                        : "border-gray-200 hover:border-emerald-300 hover:bg-emerald-50 text-gray-700 hover:shadow-lg cursor-pointer";
                                } else if (index === readingData.correctOption) {
                                    buttonClass += "border-green-500 bg-green-50 text-green-700 shadow-lg";
                                } else if (index === selectedAnswer) {
                                    buttonClass += "border-red-500 bg-red-50 text-red-700 shadow-lg";
                                } else {
                                    buttonClass += "border-gray-200 bg-gray-50 text-gray-500";
                                }

                                return (
                                    <button
                                        key={index}
                                        onClick={() => handleAnswerSelect(index)}
                                        disabled={selectedAnswer !== null || combinedProcessing}
                                        className={buttonClass}
                                    >
                                        <div className="flex items-center">
                                            <div className="bg-teal-100 text-teal-600 w-8 h-8 rounded-full flex items-center justify-center font-bold mr-4 flex-shrink-0">
                                                {String.fromCharCode(65 + index)}
                                            </div>
                                            <span className="flex-1">{fact}</span>
                                            {selectedAnswer !== null && (
                                                <span className="ml-3">
                                                    {index === readingData.correctOption ? (
                                                        <CheckCircle className="w-6 h-6 text-green-600" />
                                                    ) : index === selectedAnswer ? (
                                                        <XCircle className="w-6 h-6 text-red-600" />
                                                    ) : null}
                                                </span>
                                            )}
                                        </div>
                                    </button>
                                );
                            })}
                        </div>
                    </>
                )}
            </div>

            {/* –í–ò–ü–†–ê–í–õ–ï–ù–û: –¢–∞–±–∏ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –≤—Å—ñ—Ö 3 —Å–ª—ñ–≤ –∑ –ø–µ—Ä–µ–¥–∞—á–µ—é isCorrect */}
            {showResult && usedWords.length > 0 && (
                <div className="bg-white rounded-2xl shadow-md overflow-hidden mb-6">
                    {/* –¢–∞–±–∏ –¥–ª—è —Å–ª—ñ–≤ */}
                    <div className="border-b border-gray-200">
                        <div className="flex">
                            {usedWords.map((word, index) => (
                                <button
                                    key={word._id}
                                    onClick={() => setActiveWordTab(index)}
                                    className={`px-6 py-4 font-medium text-sm border-b-2 transition-colors ${
                                        activeWordTab === index
                                            ? 'border-emerald-500 text-emerald-600 bg-emerald-50'
                                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                    }`}
                                >
                                    {word.text}
                                    <span className="ml-2 text-xs opacity-60">
                                        ({index + 1})
                                    </span>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±—É - –û–ù–û–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—î–º–æ isCorrect */}
                    {usedWords[activeWordTab] && (
                        <DetailedCardInfo
                            displayCard={updatedCards[activeWordTab] || usedWords[activeWordTab]}
                            onCardUpdate={(newCard) => handleCardUpdate(activeWordTab, newCard)}
                            isCorrect={isCorrect} // –î–û–î–ê–ù–û: –ø–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
                        />
                    )}
                </div>
            )}
        </ExerciseLayout>
    );
};

export default ReadingComprehensionExercise;