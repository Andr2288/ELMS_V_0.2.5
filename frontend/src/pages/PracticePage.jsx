// frontend/src/pages/PracticePage.jsx - –û–ù–û–í–õ–ï–ù–û –ó –ù–û–í–û–Æ –í–ü–†–ê–í–û–Æ –¢–ê –ö–ù–û–ü–ö–û–Æ –ú–Ü–ì–†–ê–¶–Ü–á

import { useState, useEffect, useRef, useCallback } from "react";
import { useFlashcardStore } from "../store/useFlashcardStore.js";
import { useCategoryStore } from "../store/useCategoryStore.js";
import MultipleChoiceExercise from "../components/exercises/MultipleChoiceExercise.jsx";
import ListenAndFillExercise from "../components/exercises/ListenAndFillExercise.jsx";
import ListenAndChooseExercise from "../components/exercises/ListenAndChooseExercise.jsx"; // –î–û–î–ê–ù–û: –Ω–æ–≤–∞ –≤–ø—Ä–∞–≤–∞
import SentenceCompletionExercise from "../components/exercises/SentenceCompletionExercise.jsx";
import DialogExercise from "../components/exercises/DialogExercise.jsx";
import ReadingComprehensionExercise from "../components/exercises/ReadingComprehensionExercise.jsx";
import ExerciseResult from "../components/shared/ExerciseResult.jsx";
import {
    Target, BookOpen, Play, Headphones, Shuffle, Brain, Type,
    CheckSquare, Volume2, Clock, ArrowRight, Star, TrendingUp,
    Calendar, Filter, X, Zap, Award, Activity, Users,
    Sparkles, Flame, ChevronRight, BarChart3, Medal,
    Globe, Settings, RefreshCw, Lightbulb, Timer, Trophy,
    MessageCircle, FileText, Eye, Layers, Loader, Download
} from "lucide-react";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (Fisher-Yates shuffle)
const shuffleArray = (array) => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
};

const PracticePage = () => {
    const {
        flashcards,
        getFlashcards,
        handleExerciseResult,
        getWordsForExercise,
        getLearningStats,
        learningStats,
        migrateFlashcardsToLatestVersion // –î–û–î–ê–ù–û: —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
    } = useFlashcardStore();
    const { categories, getCategories } = useCategoryStore();

    const activeRequestRef = useRef(null);
    const componentMountedRef = useRef(true);

    const [selectedCategory, setSelectedCategory] = useState('all');
    const [practiceCards, setPracticeCards] = useState([]);
    const [currentExercise, setCurrentExercise] = useState(null);
    const [showCategoryFilter, setShowCategoryFilter] = useState(false);
    const [showExerciseResult, setShowExerciseResult] = useState(false);
    const [exerciseResults, setExerciseResults] = useState(null);
    const [isProcessing, setIsProcessing] = useState(false);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [sessionCards, setSessionCards] = useState([]);
    const [sessionStats, setSessionStats] = useState({ correct: 0, total: 0 });
    const [sessionProgress, setSessionProgress] = useState([]);
    const [currentQuestion, setCurrentQuestion] = useState(null);
    const [questionLoading, setQuestionLoading] = useState(false);

    // –î–û–î–ê–ù–û: –°—Ç–µ–π—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Å–ª—ñ–≤ –≤ —Å–µ—Å—ñ—ó (–¥–ª—è Reading Comprehension)
    const [sessionUsedWordIds, setSessionUsedWordIds] = useState([]);

    // –°—Ç–µ–π—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    const [currentSessionProgress, setCurrentSessionProgress] = useState({ correct: 0, currentAnswered: 0 });

    // –°—Ç–µ–π—Ç –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞ –ø—Ä–∏ restart
    const [isRestarting, setIsRestarting] = useState(false);

    // –î–û–î–ê–ù–û: –°—Ç–µ–π—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó
    const [isMigrating, setIsMigrating] = useState(false);

    const [practiceStats, setPracticeStats] = useState({
        todayCompleted: 3,
        dailyGoal: 10,
        currentStreak: 7,
        thisWeekCompleted: 18,
        weeklyGoal: 50,
        totalCompleted: 247
    });

    // –û–ù–û–í–õ–ï–ù–û: –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –≤–ø—Ä–∞–≤ (–¥–æ–¥–∞–Ω–æ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É)
    const coreExercises = ['multiple-choice', 'sentence-completion', 'listen-and-fill', 'listen-and-choose'];
    const advancedExercises = ['dialog', 'reading-comprehension'];
    const allExerciseTypes = [...coreExercises, ...advancedExercises];

    useEffect(() => {
        componentMountedRef.current = true;
        return () => {
            componentMountedRef.current = false;
            if (activeRequestRef.current) {
                activeRequestRef.current.cancelled = true;
            }
        };
    }, []);

    useEffect(() => {
        const loadData = async () => {
            try {
                await Promise.all([
                    getFlashcards(),
                    getCategories(),
                    getLearningStats()
                ]);
            } catch (error) {
                console.error("Error loading initial data:", error);
            }
        };
        loadData();
    }, [getFlashcards, getCategories, getLearningStats]);

    useEffect(() => {
        let filteredCards = [...flashcards];

        if (selectedCategory === 'learning') {
            filteredCards = flashcards.filter(card => card.status === 'learning');
        } else if (selectedCategory === 'review') {
            filteredCards = flashcards.filter(card => card.status === 'review');
        } else if (selectedCategory !== 'all') {
            if (selectedCategory === 'uncategorized') {
                filteredCards = flashcards.filter(card => !card.categoryId);
            } else {
                filteredCards = flashcards.filter(card => card.categoryId?._id === selectedCategory);
            }
        }

        setPracticeCards(filteredCards);

        if (filteredCards.length > 0) {
            const readingComprehensionUsed = filteredCards.filter(card => card.isReadingComprehensionExercise).length;
            const readingComprehensionAvailable = filteredCards.filter(card => !card.isReadingComprehensionExercise).length;

            console.log(`üìä Practice cards updated: total=${filteredCards.length}, RC used=${readingComprehensionUsed}, RC available=${readingComprehensionAvailable}`);
        }
    }, [flashcards, selectedCategory]);

    useEffect(() => {
        if (!currentExercise) {
            setCurrentQuestion(null);
            setQuestionLoading(false);
            return;
        }

        const loadCurrentQuestion = async () => {
            setQuestionLoading(true);
            try {
                const question = await getCurrentQuestion();
                setCurrentQuestion(question);
            } catch (error) {
                console.error("Error loading current question:", error);
                setCurrentQuestion(null);
            } finally {
                setQuestionLoading(false);
            }
        };

        loadCurrentQuestion();
    }, [currentQuestionIndex, currentExercise, sessionUsedWordIds]);

    const safeSetState = useCallback((setter, value) => {
        if (componentMountedRef.current) {
            setter(value);
        }
    }, []);

    const cancelPreviousRequest = useCallback(() => {
        if (activeRequestRef.current) {
            activeRequestRef.current.cancelled = true;
            activeRequestRef.current = null;
        }
    }, []);

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —Ç–∏–ø—ñ–≤ –≤–ø—Ä–∞–≤
    const generateExerciseTypeSequence = useCallback((length = 10, exerciseMode = 'core') => {
        let exerciseTypes;

        if (exerciseMode === 'core') {
            exerciseTypes = coreExercises;
        } else if (exerciseMode === 'mixed') {
            exerciseTypes = allExerciseTypes;
        } else {
            exerciseTypes = coreExercises;
        }

        const sequence = [];

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤ –ø—ñ–¥—Ä—è–¥
        const shuffledTypes = shuffleArray([...exerciseTypes]);
        let lastType = shuffledTypes[Math.floor(Math.random() * shuffledTypes.length)];
        sequence.push(lastType);

        for (let i = 1; i < length; i++) {
            // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
            const availableTypes = shuffleArray(exerciseTypes.filter(type => type !== lastType));
            const nextType = availableTypes[0];
            sequence.push(nextType);
            lastType = nextType;
        }

        console.log(`üé≤ Generated randomized exercise sequence:`, sequence);
        return sequence;
    }, [coreExercises, allExerciseTypes]);

    const generateOptionCards = useCallback((rightCard, allCards, exerciseType) => {
        if (exerciseType === 'listen-and-fill') {
            return [];
        }

        if (exerciseType === 'reading-comprehension' || exerciseType === 'dialog') {
            return allCards;
        }

        const minOptions = 4;
        const otherCards = allCards.filter(card => card._id !== rightCard._id);

        if (otherCards.length < minOptions - 1) {
            return [rightCard, ...otherCards];
        }

        // –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ —ñ–Ω—à—ñ –∫–∞—Ä—Ç–∫–∏ –ø–µ—Ä–µ–¥ –≤–∏–±–æ—Ä–æ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        const shuffledOthers = shuffleArray(otherCards);
        const wrongOptions = shuffledOthers.slice(0, minOptions - 1);

        return [rightCard, ...wrongOptions];
    }, []);

    const getCurrentQuestion = useCallback(async () => {
        if (!currentExercise || currentQuestionIndex >= sessionCards.length) {
            return null;
        }

        const rightCard = sessionCards[currentQuestionIndex];
        if (!rightCard) {
            console.error("No right card found for current question index");
            return null;
        }

        let currentExerciseType;
        if (currentExercise.exerciseTypes) {
            currentExerciseType = currentExercise.exerciseTypes[currentQuestionIndex] || 'multiple-choice';
        } else {
            currentExerciseType = currentExercise.type;
        }

        let optionCards;

        if (currentExerciseType === 'reading-comprehension' || currentExerciseType === 'dialog') {
            optionCards = practiceCards;
            console.log(`${currentExerciseType} question ${currentQuestionIndex + 1} prepared with word: ${rightCard.text}`);
            console.log(`üìñ Current sessionUsedWordIds: [${sessionUsedWordIds.join(', ')}]`);
        } else {
            optionCards = generateOptionCards(rightCard, practiceCards, currentExerciseType);
        }

        return {
            rightOptionCard: rightCard,
            optionCards: optionCards,
            questionNumber: currentQuestionIndex + 1,
            totalQuestions: sessionCards.length,
            exerciseType: currentExerciseType
        };
    }, [currentExercise, currentQuestionIndex, sessionCards, generateOptionCards, practiceCards, sessionUsedWordIds]);

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ—á–∏—Å—Ç–∫–æ—é sessionUsedWordIds
    const initializeExerciseSession = useCallback(async (exerciseType, maxQuestions = 10) => {
        if (isProcessing) {
            console.log("Request already in progress, ignoring new request");
            return null;
        }

        cancelPreviousRequest();

        const requestToken = { cancelled: false };
        activeRequestRef.current = requestToken;

        safeSetState(setIsProcessing, true);

        try {
            console.log(`üöÄ Initializing ${exerciseType} session`);

            // –î–û–î–ê–ù–û: –û—á–∏—â–∞—î–º–æ sessionUsedWordIds –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
            safeSetState(setSessionUsedWordIds, []);

            if (requestToken.cancelled) {
                console.log("Request was cancelled during initialization");
                return null;
            }

            // Reading comprehension –∑ —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º excludeIds
            if (exerciseType === 'reading-comprehension') {
                console.log(`üìñ Starting reading-comprehension session with 3 questions`);

                const minCardsRequired = 3;

                if (practiceCards.length < minCardsRequired) {
                    if (componentMountedRef.current && !requestToken.cancelled) {
                        alert(`–î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º ${minCardsRequired} –∫–∞—Ä—Ç–æ–∫. –ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–æ: ${practiceCards.length}`);
                    }
                    return null;
                }

                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ excludeIds –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Å—ñ—ó
                console.log(`üìñ Reading comprehension session initialization - starting fresh`);

                try {
                    const wordsData = await getWordsForExercise(
                        'reading-comprehension',
                        3,
                        selectedCategory === 'all' ? null : selectedCategory,
                        [] // –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                    );

                    if (requestToken.cancelled || !componentMountedRef.current) {
                        console.log("Request was cancelled during reading comprehension setup");
                        return null;
                    }

                    if (wordsData.words.length < 3) {
                        if (componentMountedRef.current && !requestToken.cancelled) {
                            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤ –¥–ª—è reading comprehension. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3, –¥–æ—Å—Ç—É–ø–Ω–æ: ${wordsData.words.length}`);
                        }
                        return null;
                    }

                    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤ –∑ backend –Ω–∞ frontend
                    const selectedCards = shuffleArray([...wordsData.words]);

                    if (componentMountedRef.current && !requestToken.cancelled) {
                        safeSetState(setSessionCards, selectedCards);
                        safeSetState(setCurrentQuestionIndex, 0);
                        safeSetState(setSessionStats, { correct: 0, total: 0 });
                        safeSetState(setSessionProgress, []);
                        safeSetState(setShowExerciseResult, false);
                        safeSetState(setExerciseResults, null);
                        safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });

                        console.log(`üìñ Reading comprehension session initialized with 3 questions for words (shuffled):`,
                            selectedCards.map(c => c.text));

                        if (wordsData.wasRotationApplied) {
                            console.log(`üîÑ Rotation was applied during session initialization`);

                            if (wordsData.allCategoryWords && wordsData.allCategoryWords.length > 0) {
                                console.log(`üîÑ Updating ${wordsData.allCategoryWords.length} flashcards after rotation`);

                                // –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ flashcards –ø—ñ—Å–ª—è —Ä–æ—Ç–∞—Ü—ñ—ó
                                setTimeout(() => {
                                    getFlashcards(selectedCategory === 'all' ? null : selectedCategory);
                                }, 100);
                            }
                        }

                        return {
                            type: exerciseType,
                            cards: selectedCards,
                            mode: 'advanced',
                            wasRotationApplied: wordsData.wasRotationApplied,
                            allCategoryWords: wordsData.allCategoryWords
                        };
                    }
                } catch (error) {
                    console.error("Error getting words for reading comprehension:", error);
                    if (componentMountedRef.current && !requestToken.cancelled) {
                        alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ reading comprehension");
                    }
                    return null;
                }
            }

            // Dialog –∑ —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—î—é
            if (exerciseType === 'dialog') {
                console.log(`üí¨ Starting dialog session with 3 questions`);

                const minCardsRequired = 3;

                if (practiceCards.length < minCardsRequired) {
                    if (componentMountedRef.current && !requestToken.cancelled) {
                        alert(`–î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º ${minCardsRequired} –∫–∞—Ä—Ç–æ–∫. –ó–∞—Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–æ: ${practiceCards.length}`);
                    }
                    return null;
                }

                const sessionUsedWordIds = sessionProgress
                    .filter(progress => progress.exerciseType === 'dialog')
                    .map(progress => progress.flashcardId);

                console.log(`üí¨ Excluding ${sessionUsedWordIds.length} words already used in session:`, sessionUsedWordIds);

                try {
                    const wordsData = await getWordsForExercise(
                        'dialog',
                        3,
                        selectedCategory === 'all' ? null : selectedCategory,
                        sessionUsedWordIds
                    );

                    if (requestToken.cancelled || !componentMountedRef.current) {
                        console.log("Request was cancelled during dialog setup");
                        return null;
                    }

                    if (wordsData.words.length < 3) {
                        if (componentMountedRef.current && !requestToken.cancelled) {
                            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤ –¥–ª—è –¥—ñ–∞–ª–æ–≥—É. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3, –¥–æ—Å—Ç—É–ø–Ω–æ: ${wordsData.words.length}`);
                        }
                        return null;
                    }

                    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤ –∑ backend –Ω–∞ frontend
                    const selectedCards = shuffleArray([...wordsData.words]);

                    if (componentMountedRef.current && !requestToken.cancelled) {
                        safeSetState(setSessionCards, selectedCards);
                        safeSetState(setCurrentQuestionIndex, 0);
                        safeSetState(setSessionStats, { correct: 0, total: 0 });
                        safeSetState(setSessionProgress, []);
                        safeSetState(setShowExerciseResult, false);
                        safeSetState(setExerciseResults, null);
                        safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });

                        console.log(`üí¨ Dialog session initialized with 3 questions for words (shuffled):`,
                            selectedCards.map(c => c.text));

                        if (sessionUsedWordIds.length > 0) {
                            console.log(`üö´ Excluded ${sessionUsedWordIds.length} words from previous questions in session`);
                        }

                        return {
                            type: exerciseType,
                            cards: selectedCards,
                            mode: 'advanced'
                        };
                    }
                } catch (error) {
                    console.error("Error getting words for dialog:", error);
                    if (componentMountedRef.current && !requestToken.cancelled) {
                        alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥—ñ–∞–ª–æ–≥—É");
                    }
                    return null;
                }
            }

            // –û–ù–û–í–õ–ï–ù–û: –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É)
            if (exerciseType === 'quick-warmup' || exerciseType === 'intensive-mode' || exerciseType === 'knowledge-marathon') {
                const cardCounts = {
                    'quick-warmup': 10,
                    'intensive-mode': 20,
                    'knowledge-marathon': 30
                };

                const requiredCards = cardCounts[exerciseType];
                // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
                const exerciseTypeSequence = generateExerciseTypeSequence(requiredCards, 'core');

                const sessionWordsData = [];
                const usedWordIds = [];

                for (let i = 0; i < requiredCards; i++) {
                    const currentExerciseType = exerciseTypeSequence[i];

                    try {
                        const wordsData = await getWordsForExercise(
                            currentExerciseType,
                            1,
                            selectedCategory === 'all' ? null : selectedCategory,
                            usedWordIds
                        );

                        if (wordsData.words.length > 0) {
                            const selectedWord = wordsData.words[0];
                            sessionWordsData.push({
                                word: selectedWord,
                                exerciseType: currentExerciseType
                            });

                            usedWordIds.push(selectedWord._id);
                        } else {
                            console.warn(`No available words for ${currentExerciseType} (attempt ${i + 1})`);
                        }
                    } catch (error) {
                        console.warn(`Failed to get word for ${currentExerciseType}:`, error);
                    }

                    if (requestToken.cancelled || !componentMountedRef.current) {
                        console.log("Request was cancelled during word fetching");
                        return null;
                    }
                }

                if (sessionWordsData.length === 0) {
                    throw new Error(`No cards available for ${exerciseType}`);
                }

                if (componentMountedRef.current && !requestToken.cancelled) {
                    const words = sessionWordsData.map(item => item.word);
                    const exerciseTypes = sessionWordsData.map(item => item.exerciseType);

                    // –ù–ï –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–µ–∞–Ω—Å, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤ –≤–ø—Ä–∞–≤
                    safeSetState(setSessionCards, words);
                    safeSetState(setCurrentQuestionIndex, 0);
                    safeSetState(setSessionStats, { correct: 0, total: 0 });
                    safeSetState(setSessionProgress, []);
                    safeSetState(setShowExerciseResult, false);
                    safeSetState(setExerciseResults, null);
                    safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });

                    console.log(`üéØ ${exerciseType} session initialized with ${words.length} words in correct sequence:`,
                        words.map((w, i) => `${w.text} (${exerciseTypes[i]})`));

                    return {
                        type: exerciseType,
                        cards: words,
                        exerciseTypes: exerciseTypes, // –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
                        mode: 'core'
                    };
                }
            }

            // –ú—ñ–∫—Å–æ–≤–∞–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é
            if (exerciseType === 'mixed-practice') {
                const exerciseTypeSequence = generateExerciseTypeSequence(15, 'mixed');

                const sessionWordsData = [];
                const usedWordIds = [];

                for (let i = 0; i < 15; i++) {
                    const currentExerciseType = exerciseTypeSequence[i];

                    try {
                        const wordsData = await getWordsForExercise(
                            currentExerciseType,
                            1,
                            selectedCategory === 'all' ? null : selectedCategory,
                            usedWordIds
                        );

                        if (wordsData.words.length > 0) {
                            const selectedWord = wordsData.words[0];
                            sessionWordsData.push({
                                word: selectedWord,
                                exerciseType: currentExerciseType
                            });
                            usedWordIds.push(selectedWord._id);
                        }
                    } catch (error) {
                        console.warn(`Failed to get word for ${currentExerciseType}:`, error);
                    }

                    if (requestToken.cancelled || !componentMountedRef.current) {
                        console.log("Request was cancelled during mixed practice setup");
                        return null;
                    }
                }

                if (sessionWordsData.length === 0) {
                    throw new Error("No cards available for mixed practice");
                }

                if (componentMountedRef.current && !requestToken.cancelled) {
                    const words = sessionWordsData.map(item => item.word);
                    const exerciseTypes = sessionWordsData.map(item => item.exerciseType);

                    // –ù–ï –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ —Å–µ–∞–Ω—Å, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤ –≤–ø—Ä–∞–≤
                    safeSetState(setSessionCards, words);
                    safeSetState(setCurrentQuestionIndex, 0);
                    safeSetState(setSessionStats, { correct: 0, total: 0 });
                    safeSetState(setSessionProgress, []);
                    safeSetState(setShowExerciseResult, false);
                    safeSetState(setExerciseResults, null);
                    safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });

                    console.log(`üéØ Mixed practice session initialized with ${words.length} words in correct sequence:`,
                        words.map((w, i) => `${w.text} (${exerciseTypes[i]})`));

                    return {
                        type: exerciseType,
                        cards: words,
                        exerciseTypes: exerciseTypes, // –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
                        mode: 'mixed'
                    };
                }
            }

            // –û–ù–û–í–õ–ï–ù–û: –ó–≤–∏—á–∞–π–Ω—ñ –≤–ø—Ä–∞–≤–∏ –∑ —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—î—é (–≤–∫–ª—é—á–∞—é—á–∏ –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É)
            const minCardsRequired = {
                'multiple-choice': 4,
                'sentence-completion': 4,
                'listen-and-fill': 1,
                'listen-and-choose': 4 // –î–û–î–ê–ù–û: –Ω–æ–≤–∞ –≤–ø—Ä–∞–≤–∞
            };

            try {
                const wordsData = await getWordsForExercise(
                    exerciseType,
                    maxQuestions,
                    selectedCategory === 'all' ? null : selectedCategory
                );

                if (requestToken.cancelled || !componentMountedRef.current) {
                    console.log("Request was cancelled during regular exercise setup");
                    return null;
                }

                if (wordsData.words.length < minCardsRequired[exerciseType]) {
                    if (componentMountedRef.current && !requestToken.cancelled) {
                        alert(`–î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º ${minCardsRequired[exerciseType]} –∫–∞—Ä—Ç–æ–∫.`);
                    }
                    return null;
                }

                if (componentMountedRef.current && !requestToken.cancelled) {
                    // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è —Å–ª—ñ–≤ –∑ backend
                    const shuffledWords = shuffleArray([...wordsData.words]);

                    safeSetState(setSessionCards, shuffledWords);
                    safeSetState(setCurrentQuestionIndex, 0);
                    safeSetState(setSessionStats, { correct: 0, total: 0 });
                    safeSetState(setSessionProgress, []);
                    safeSetState(setShowExerciseResult, false);
                    safeSetState(setExerciseResults, null);
                    safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });

                    console.log(`üé≤ Regular session initialized with ${shuffledWords.length} unique words (shuffled):`, shuffledWords.map(w => w.text));

                    return {
                        type: exerciseType,
                        cards: shuffledWords,
                        mode: coreExercises.includes(exerciseType) ? 'core' : 'advanced'
                    };
                }
            } catch (error) {
                console.error("Error getting words for exercise:", error);
                if (componentMountedRef.current && !requestToken.cancelled) {
                    alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–ø—Ä–∞–≤–∏");
                }
                return null;
            }

            return null;

        } catch (error) {
            console.error("Error initializing exercise session:", error);
            if (componentMountedRef.current && !requestToken.cancelled) {
                alert("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤–ø—Ä–∞–≤–∏");
            }
            return null;
        } finally {
            if (activeRequestRef.current === requestToken) {
                activeRequestRef.current = null;
            }
            if (componentMountedRef.current) {
                safeSetState(setIsProcessing, false);
            }
        }
    }, [isProcessing, cancelPreviousRequest, safeSetState, getWordsForExercise, selectedCategory, generateExerciseTypeSequence, coreExercises, practiceCards, sessionProgress, getFlashcards]);

    const handleExerciseClick = useCallback(async (exerciseType) => {
        if (isProcessing || isRestarting) {
            console.log("Exercise click ignored: already processing");
            return;
        }

        console.log(`üé≤ Starting ${exerciseType} exercise with randomization`);
        const session = await initializeExerciseSession(exerciseType);

        if (session && componentMountedRef.current) {
            safeSetState(setCurrentExercise, session);
        }
    }, [isProcessing, isRestarting, initializeExerciseSession, safeSetState]);

    // Callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    const handleProgressUpdate = useCallback((updatedProgress) => {
        safeSetState(setCurrentSessionProgress, updatedProgress);
    }, [safeSetState]);

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º sessionUsedWordIds
    const handleQuestionResult = useCallback(async (result) => {
        if (isProcessing || !componentMountedRef.current) {
            console.log("Question result ignored: processing or unmounted");
            return;
        }

        safeSetState(setIsProcessing, true);

        try {
            if (!result.completed) {
                if (componentMountedRef.current) {
                    safeSetState(setCurrentExercise, null);
                    safeSetState(setSessionCards, []);
                    safeSetState(setCurrentQuestionIndex, 0);
                    safeSetState(setSessionProgress, []);
                    safeSetState(setShowExerciseResult, false);
                    safeSetState(setExerciseResults, null);
                    safeSetState(setCurrentQuestion, null);
                    safeSetState(setQuestionLoading, false);
                    safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });
                    safeSetState(setSessionUsedWordIds, []); // –î–û–î–ê–ù–û: –æ—á–∏—â–∞—î–º–æ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
                }
                return;
            }

            let currentWordProgress = [];

            if (result.rightOptionCard) {
                let currentExerciseType;
                if (currentExercise.exerciseTypes) {
                    currentExerciseType = currentExercise.exerciseTypes[currentQuestionIndex] || 'multiple-choice';
                } else {
                    currentExerciseType = currentExercise.type;
                }

                try {
                    if (currentExerciseType === 'reading-comprehension' && result.usedWordIds && result.allWordsData) {
                        console.log(`üìñ Processing reading comprehension result with ${result.usedWordIds.length} words`);
                        console.log(`üìñ Used word IDs:`, result.usedWordIds);
                        console.log(`üìñ All words data:`, result.allWordsData.map(w => w.text));

                        const exerciseResult = await handleExerciseResult(
                            result.rightOptionCard._id,
                            currentExerciseType,
                            result.isCorrect,
                            result.usedWordIds
                        );

                        console.log(`üìñ Backend response:`, exerciseResult);

                        if (exerciseResult.allWords && Array.isArray(exerciseResult.allWords)) {
                            currentWordProgress = exerciseResult.allWords.map(backendWord => ({
                                flashcardId: backendWord._id,
                                text: backendWord.text,
                                exerciseType: currentExerciseType,
                                isCorrect: result.isCorrect,
                                progressInfo: backendWord.progressInfo || { status: 'completed', progress: 100 },
                                isInCurrentSession: true
                            }));

                            console.log(`üìñ Created progress for ${currentWordProgress.length} words from backend:`,
                                currentWordProgress.map(w => w.text));
                        } else {
                            currentWordProgress = result.allWordsData.map(wordData => ({
                                flashcardId: wordData._id,
                                text: wordData.text,
                                exerciseType: currentExerciseType,
                                isCorrect: result.isCorrect,
                                progressInfo: { status: 'completed', progress: 100 },
                                isInCurrentSession: true
                            }));

                            console.log(`üìñ Used fallback progress for ${currentWordProgress.length} words`);
                        }

                        // –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ sessionUsedWordIds —è–∫—â–æ —î –Ω–æ–≤—ñ ID
                        if (result.newSessionUsedWordIds && Array.isArray(result.newSessionUsedWordIds)) {
                            console.log(`üìñ Updating sessionUsedWordIds: ${sessionUsedWordIds.length} -> ${result.newSessionUsedWordIds.length}`);
                            safeSetState(setSessionUsedWordIds, result.newSessionUsedWordIds);
                        }

                        // –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ flashcards —â–æ–± —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏
                        setTimeout(() => {
                            getFlashcards(selectedCategory === 'all' ? null : selectedCategory);
                        }, 100);

                    } else {
                        const flashcardId = result.rightOptionCard._id;

                        const exerciseResult = await handleExerciseResult(flashcardId, currentExerciseType, result.isCorrect);

                        currentWordProgress = [{
                            flashcardId,
                            text: result.rightOptionCard.text,
                            exerciseType: currentExerciseType,
                            isCorrect: result.isCorrect,
                            progressInfo: exerciseResult.flashcard.progressInfo,
                            isInCurrentSession: true
                        }];

                        console.log(`üìù Exercise result processed:`, exerciseResult.message);
                    }
                } catch (error) {
                    console.error("‚ùå Error handling exercise result:", error);

                    if (currentExerciseType === 'reading-comprehension' && result.allWordsData) {
                        currentWordProgress = result.allWordsData.map(wordData => ({
                            flashcardId: wordData._id,
                            text: wordData.text,
                            exerciseType: currentExerciseType,
                            isCorrect: result.isCorrect,
                            progressInfo: { status: 'completed', progress: 100 },
                            isInCurrentSession: true
                        }));

                        console.log(`üìñ Used error fallback for ${currentWordProgress.length} words`);
                    } else {
                        currentWordProgress = [{
                            flashcardId: result.rightOptionCard._id,
                            text: result.rightOptionCard.text,
                            exerciseType: currentExerciseType,
                            isCorrect: result.isCorrect,
                            progressInfo: { status: 'completed', progress: 100 },
                            isInCurrentSession: true
                        }];
                    }
                }
            }

            const newStats = {
                correct: sessionStats.correct + (result.isCorrect ? 1 : 0),
                total: sessionStats.total + 1
            };

            if (componentMountedRef.current) {
                if (currentWordProgress.length > 0) {
                    safeSetState(setSessionProgress, prev => {
                        const updated = [...prev, ...currentWordProgress];
                        console.log(`üìä Updated session progress: ${updated.length} total words`);
                        return updated;
                    });
                }

                safeSetState(setSessionStats, newStats);

                console.log(`üìä Current question: ${currentQuestionIndex + 1}, Total questions: ${sessionCards.length}`);

                if (currentQuestionIndex < sessionCards.length - 1) {
                    console.log(`üìñ Moving to next question: ${currentQuestionIndex + 2}`);
                    safeSetState(setCurrentQuestionIndex, prev => prev + 1);
                } else {
                    console.log(`üìñ Session completed after ${sessionCards.length} questions`);
                    const updatedProgress = currentWordProgress.length > 0
                        ? [...sessionProgress, ...currentWordProgress]
                        : sessionProgress;

                    handleSessionComplete(newStats, updatedProgress);
                }
            }
        } catch (error) {
            console.error("‚ùå Error handling question result:", error);
        } finally {
            if (componentMountedRef.current) {
                safeSetState(setIsProcessing, false);
            }
        }
    }, [isProcessing, safeSetState, handleExerciseResult, sessionStats, currentQuestionIndex, sessionCards, currentExercise, sessionProgress, sessionUsedWordIds, getFlashcards, selectedCategory]);

    const handleSessionComplete = useCallback((finalStats, actualProgress = null) => {
        if (!componentMountedRef.current) return;

        const progressToUse = actualProgress || sessionProgress;

        const results = {
            correct: finalStats.correct,
            total: finalStats.total,
            exerciseType: currentExercise.type,
            sessionProgress: progressToUse
        };

        if (currentExercise.type === 'reading-comprehension') {
            if (currentExercise.allCategoryWords) {
                console.log(`üìñ Using allCategoryWords from session: ${currentExercise.allCategoryWords.length} words`);
                results.allCategoryWords = currentExercise.allCategoryWords;
            } else {
                console.log(`üìñ Using practiceCards as fallback: ${practiceCards.length} words`);
                results.allCategoryWords = practiceCards;
            }

            results.selectedCategory = selectedCategory;

            console.log(`üìñ Reading comprehension completed. Category words: ${results.allCategoryWords.length}, Session words: ${progressToUse.length}`);

            if (currentExercise.wasRotationApplied) {
                console.log(`üîÑ Session completed with rotation - refreshing flashcards to show updated state`);
                setTimeout(() => {
                    getFlashcards(selectedCategory === 'all' ? null : selectedCategory);
                }, 1000);
            }
        }

        console.log(`Session completed with ${progressToUse.length} words in progress:`, progressToUse.map(p => p.text));

        setPracticeStats(prev => ({
            ...prev,
            todayCompleted: prev.todayCompleted + 1,
            thisWeekCompleted: prev.thisWeekCompleted + 1,
            totalCompleted: prev.totalCompleted + 1
        }));

        getLearningStats();

        safeSetState(setExerciseResults, results);
        safeSetState(setShowExerciseResult, true);
        safeSetState(setCurrentExercise, null);
        safeSetState(setCurrentQuestion, null);
        safeSetState(setQuestionLoading, false);
        safeSetState(setSessionUsedWordIds, []); // –î–û–î–ê–ù–û: –æ—á–∏—â–∞—î–º–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó
    }, [currentExercise, sessionProgress, safeSetState, getLearningStats, selectedCategory, getFlashcards, practiceCards]);

    // –õ–æ–≥—ñ–∫–∞ restart –∑ –ª–æ–∞–¥–µ—Ä–æ–º
    const handleRestartExercise = useCallback(async () => {
        if (isProcessing || isRestarting) {
            console.log("Restart ignored: already processing");
            return;
        }

        const currentType = currentExercise?.type || exerciseResults?.exerciseType;

        if (currentType && componentMountedRef.current) {
            safeSetState(setIsRestarting, true);

            try {
                console.log(`üîÑüé≤ Restarting ${currentType} with new randomization`);

                // –î–û–î–ê–ù–û: –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏ –ø—Ä–æ–≥—Ä–µ—Å—É –≤–∫–ª—é—á–Ω–æ –∑ sessionUsedWordIds
                safeSetState(setSessionProgress, []);
                safeSetState(setCurrentQuestion, null);
                safeSetState(setQuestionLoading, false);
                safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });
                safeSetState(setSessionUsedWordIds, []); // –î–û–î–ê–ù–û

                const session = await initializeExerciseSession(currentType);

                if (session && componentMountedRef.current) {
                    safeSetState(setCurrentExercise, session);
                    safeSetState(setShowExerciseResult, false);
                    safeSetState(setExerciseResults, null);
                }
            } catch (error) {
                console.error("Error restarting exercise:", error);
            } finally {
                if (componentMountedRef.current) {
                    safeSetState(setIsRestarting, false);
                }
            }
        }
    }, [isProcessing, isRestarting, currentExercise, exerciseResults, safeSetState, initializeExerciseSession]);

    const handleExitExercise = useCallback(() => {
        if (isProcessing) {
            console.log("Exit ignored: processing in progress");
            return;
        }

        cancelPreviousRequest();

        safeSetState(setIsProcessing, true);

        if (componentMountedRef.current) {
            safeSetState(setCurrentExercise, null);
            safeSetState(setSessionCards, []);
            safeSetState(setCurrentQuestionIndex, 0);
            safeSetState(setSessionStats, { correct: 0, total: 0 });
            safeSetState(setSessionProgress, []);
            safeSetState(setShowExerciseResult, false);
            safeSetState(setExerciseResults, null);
            safeSetState(setCurrentQuestion, null);
            safeSetState(setQuestionLoading, false);
            safeSetState(setCurrentSessionProgress, { correct: 0, currentAnswered: 0 });
            safeSetState(setIsRestarting, false);
            safeSetState(setSessionUsedWordIds, []); // –î–û–î–ê–ù–û: –æ—á–∏—â–∞—î–º–æ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
        }

        setTimeout(() => {
            if (componentMountedRef.current) {
                safeSetState(setIsProcessing, false);
            }
        }, 300);
    }, [isProcessing, cancelPreviousRequest, safeSetState]);

    const handleCardUpdate = useCallback((newCard) => {
        // Placeholder for card update
    }, []);

    // –î–û–î–ê–ù–û: –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–æ–∫
    const handleMigrateFlashcards = useCallback(async () => {
        if (isMigrating || isProcessing || isRestarting) {
            console.log("Migration ignored: already processing");
            return;
        }

        setIsMigrating(true);

        try {
            console.log("üîÑ Starting flashcard migration to latest version...");
            const result = await migrateFlashcardsToLatestVersion();

            console.log("‚úÖ Migration completed:", result);

            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
            setTimeout(() => {
                getLearningStats();
            }, 1000);

        } catch (error) {
            console.error("‚ùå Migration failed:", error);
        } finally {
            setIsMigrating(false);
        }
    }, [isMigrating, isProcessing, isRestarting, migrateFlashcardsToLatestVersion, getLearningStats]);

    // –û–ù–û–í–õ–ï–ù–û: Exercise types data –∑ –Ω–æ–≤–æ—é –≤–ø—Ä–∞–≤–æ—é
    const coreExercisesData = [
        {
            id: 'multiple-choice',
            title: '–û–±—Ä–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç',
            description: '–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–ª–æ–≤–æ –∑–∞ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º',
            icon: Brain,
            color: 'from-purple-500 to-pink-500',
            difficulty: '–°–µ—Ä–µ–¥–Ω–∏–π',
            difficultyColor: 'text-blue-600',
            difficultyBg: 'bg-blue-600',
            time: '2-3 —Ö–≤',
            minCards: 4,
            category: 'core',
            features: ['–®–≤–∏–¥–∫–µ –∑–∞–ø–∞–º\'—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è', '–õ–æ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è']
        },
        {
            id: 'sentence-completion',
            title: '–î–æ–ø–æ–≤–Ω–∏ —Ä–µ—á–µ–Ω–Ω—è',
            description: '–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É',
            icon: Type,
            color: 'from-emerald-500 to-teal-500',
            difficulty: '–°–µ—Ä–µ–¥–Ω–∏–π',
            difficultyColor: 'text-blue-600',
            difficultyBg: 'bg-blue-600',
            time: '2-4 —Ö–≤',
            minCards: 4,
            category: 'core',
            features: ['–ì—Ä–∞–º–∞—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç', '–†–æ–∑—É–º—ñ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏', '–®–≤–∏–¥–∫–µ –º–∏—Å–ª–µ–Ω–Ω—è']
        },
        {
            id: 'listen-and-fill',
            title: '–°–ª—É—Ö–∞–Ω–Ω—è —Ç–∞ –ø–∏—Å—å–º–æ',
            description: '–ü—Ä–æ—Å–ª—É—Ö–∞–π—Ç–µ —Ä–µ—á–µ–Ω–Ω—è —Ç–∞ –≤–ø–∏—à—ñ—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–µ —Å–ª–æ–≤–æ',
            icon: Headphones,
            color: 'from-blue-500 to-cyan-500',
            difficulty: '–°–∫–ª–∞–¥–Ω–∏–π',
            difficultyColor: 'text-purple-600',
            difficultyBg: 'bg-purple-600',
            time: '3-5 —Ö–≤',
            minCards: 1,
            category: 'core',
            features: ['–†–æ–∑–≤–∏—Ç–æ–∫ —Å–ª—É—Ö—É', '–ü—Ä–∞–≤–æ–ø–∏—Å', '–í–∏–º–æ–≤–∞']
        },
        // –î–û–î–ê–ù–û: –ù–æ–≤–∞ –æ—Å–Ω–æ–≤–Ω–∞ –≤–ø—Ä–∞–≤–∞
        {
            id: 'listen-and-choose',
            title: '–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ —Ç–∞ –æ–±—Ä–∞—Ç–∏',
            description: '–ü—Ä–æ—Å–ª—É—Ö–∞–π—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–ª–æ–≤–æ',
            icon: Volume2,
            color: 'from-indigo-500 to-purple-500',
            difficulty: '–°–µ—Ä–µ–¥–Ω—ñ–π',
            difficultyColor: 'text-blue-600',
            difficultyBg: 'bg-blue-600',
            time: '2-4 —Ö–≤',
            minCards: 4,
            category: 'core',
            features: ['–†–æ–∑–≤–∏—Ç–æ–∫ —Å–ª—É—Ö—É', '–õ–æ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è —É–≤–∞–≥–∏']
        }
    ];

    const advancedExercisesData = [
        {
            id: 'dialog',
            title: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥',
            description: '–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π —à–ª—è—Ö —É —Ä–æ–∑–º–æ–≤—ñ —Ç–∞ –ø–æ–∫—Ä–∞—â—Ç–µ —á–∏—Ç–∞–Ω–Ω—è',
            icon: MessageCircle,
            color: 'from-indigo-500 to-purple-500',
            difficulty: '–õ–µ–≥–∫–∏–π',
            difficultyColor: 'text-green-600',
            difficultyBg: 'bg-green-600',
            time: '3-5 —Ö–≤ (3 –ø–∏—Ç–∞–Ω–Ω—è)',
            minCards: 3,
            category: 'advanced',
            features: ['–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è', '–ü—Ä–∞–∫—Ç–∏–∫–∞ —á–∏—Ç–∞–Ω–Ω—è', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è']
        },
        {
            id: 'reading-comprehension',
            title: '–†–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–≥–æ',
            description: '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–∫—Ç',
            icon: FileText,
            color: 'from-emerald-400 to-teal-400',
            difficulty: '–°–∫–ª–∞–¥–Ω–∏–π',
            difficultyColor: 'text-purple-600',
            difficultyBg: 'bg-purple-600',
            time: '3-5 —Ö–≤ (3 –ø–∏—Ç–∞–Ω–Ω—è)',
            minCards: 3,
            category: 'advanced',
            features: ['–ß–∏—Ç–∞–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ', '–ê–Ω–∞–ª—ñ–∑ —Ñ–∞–∫—Ç—ñ–≤', '–î–µ—Ç–∞–ª—å–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è']
        }
    ];

    // Quick practice suggestions –ë–ï–ó –û–†–ê–ù–ñ–ï–í–û–ì–û –ö–û–õ–¨–û–†–£
    const quickPractice = [
        {
            title: '–®–≤–∏–¥–∫–∞ —Ä–æ–∑–º–∏–Ω–∫–∞',
            description: '10 –∫–∞—Ä—Ç–æ–∫, –æ—Å–Ω–æ–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏',
            icon: Zap,
            cards: 10,
            time: '5-7 —Ö–≤',
            color: 'bg-gradient-to-t from-emerald-500 to-teal-500', // –ó–ú–Ü–ù–ï–ù–û: –∑–∞–º—ñ—Å—Ç—å –∂–æ–≤—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ
            exerciseType: 'quick-warmup'
        },
        {
            title: '–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º',
            description: '20 –∫–∞—Ä—Ç–æ–∫, –æ—Å–Ω–æ–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏',
            icon: Flame,
            cards: 20,
            time: '10-15 —Ö–≤',
            color: 'bg-gradient-to-t from-purple-600 to-pink-600',
            exerciseType: 'intensive-mode'
        },
        {
            title: '–ú–∞—Ä–∞—Ñ–æ–Ω –∑–Ω–∞–Ω—å',
            description: '30 –∫–∞—Ä—Ç–æ–∫, –æ—Å–Ω–æ–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏',
            icon: Medal,
            cards: 30,
            time: '15-25 —Ö–≤',
            color: 'bg-gradient-to-b from-indigo-600 to-purple-600',
            exerciseType: 'knowledge-marathon'
        }
    ];

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –ª–æ–∞–¥–µ—Ä–æ–º restart
    if (showExerciseResult && exerciseResults) {
        const getGradientClass = (exerciseType) => {
            const gradients = {
                'quick-warmup': 'from-emerald-500 to-teal-500', // –ó–ú–Ü–ù–ï–ù–û: –∑–∞–º—ñ—Å—Ç—å –∂–æ–≤—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ
                'intensive-mode': 'from-purple-600 to-pink-600',
                'knowledge-marathon': 'from-indigo-600 to-purple-600',
                'mixed-practice': 'from-blue-500 to-purple-600',
                'multiple-choice': 'from-purple-600 to-pink-600',
                'sentence-completion': 'from-emerald-500 to-teal-500',
                'listen-and-fill': 'from-blue-400 to-cyan-500',
                'listen-and-choose': 'from-indigo-400 to-purple-400', // –î–û–î–ê–ù–û: –≥—Ä–∞–¥—ñ—î–Ω—Ç –¥–ª—è –Ω–æ–≤–æ—ó –≤–ø—Ä–∞–≤–∏
                'dialog': 'from-indigo-600 to-purple-600',
                'reading-comprehension': 'from-emerald-500 to-teal-500'
            };
            return gradients[exerciseType] || 'from-blue-400 to-purple-500';
        };

        return (
            <div className="ml-64 min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-8">
                <div className="max-w-5xl mx-auto">
                    <ExerciseResult
                        results={exerciseResults}
                        onRestart={handleRestartExercise}
                        onExit={handleExitExercise}
                        gradientClasses={getGradientClass(exerciseResults.exerciseType)}
                        isProcessing={isProcessing}
                        isRestarting={isRestarting}
                    />
                </div>
            </div>
        );
    }

    // –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤–ø—Ä–∞–≤–∏
    if (currentExercise) {
        if (questionLoading || !currentQuestion) {
            return (
                <div className="ml-64 min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-8">
                    <div className="max-w-4xl mx-auto text-center py-12">
                        <div className="bg-white rounded-2xl shadow-md p-8">
                            <Trophy className="w-16 h-16 text-blue-500 mx-auto mb-4 animate-spin" />
                            <h2 className="text-2xl font-bold text-gray-900 mb-4">
                                {questionLoading ? '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞...' : '–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞...'}
                            </h2>
                            <p className="text-gray-600 mb-6">
                                {questionLoading ? '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–ø—Ä–∞–≤–∏' : '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–ø—Ä–∞–≤–∏...'}
                            </p>
                        </div>
                    </div>
                </div>
            );
        }

        // –ü—Ä–æ–≥—Ä–µ—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        const progressData = {
            current: currentQuestion.questionNumber,
            total: currentQuestion.totalQuestions,
            correct: currentSessionProgress.correct
        };

        const isLastQuestion = currentQuestion.questionNumber === currentQuestion.totalQuestions;

        const renderExerciseComponent = () => {
            switch (currentQuestion.exerciseType) {
                case 'multiple-choice':
                    return (
                        <MultipleChoiceExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            optionCards={currentQuestion.optionCards}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                        />
                    );
                case 'sentence-completion':
                    return (
                        <SentenceCompletionExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            optionCards={currentQuestion.optionCards}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                        />
                    );
                case 'listen-and-fill':
                    return (
                        <ListenAndFillExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                        />
                    );
                // –î–û–î–ê–ù–û: –†–µ–Ω–¥–µ—Ä –Ω–æ–≤–æ—ó –≤–ø—Ä–∞–≤–∏
                case 'listen-and-choose':
                    return (
                        <ListenAndChooseExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            optionCards={currentQuestion.optionCards}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                        />
                    );
                case 'dialog':
                    return (
                        <DialogExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            optionCards={currentQuestion.optionCards}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                        />
                    );
                case 'reading-comprehension':
                    return (
                        <ReadingComprehensionExercise
                            rightOptionCard={currentQuestion.rightOptionCard}
                            optionCards={currentQuestion.optionCards}
                            onExit={handleQuestionResult}
                            progress={progressData}
                            isLastQuestion={isLastQuestion}
                            onRestart={handleRestartExercise}
                            isProcessing={isProcessing}
                            onProgressUpdate={handleProgressUpdate}
                            sessionUsedWordIds={sessionUsedWordIds} // –î–û–î–ê–ù–û: –ø–µ—Ä–µ–¥–∞—î–º–æ excludeIds
                        />
                    );
                default:
                    return (
                        <div className="max-w-4xl mx-auto text-center py-12">
                            <p className="text-gray-600 mb-4">–¶—è –≤–ø—Ä–∞–≤–∞ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ</p>
                            <button
                                onClick={() => setCurrentExercise(null)}
                                className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg"
                            >
                                –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è
                            </button>
                        </div>
                    );
            }
        };

        return (
            <div className="ml-64 min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-8">
                {renderExerciseComponent()}
            </div>
        );
    }

    return (
        <div className="relative ml-64 min-h-screen bg-gradient-to-br from-slate-100 via-blue-50 to-indigo-100">
            {/* Hero Section */}
            <div className="bg-white border-b border-gray-200 relative overflow-hidden p-8">
                <div className="mx-auto flex items-center">
                    <div className="bg-gradient-to-r from-blue-600 to-purple-600 w-10 h-10 rounded-lg flex items-center justify-center mr-3 shadow-md">
                        <Target className="w-6 h-6 text-white" />
                    </div>
                    <div>
                        <h1 className="text-xl font-bold text-gray-900">
                            –ü—Ä–∞–∫—Ç–∏–∫–∞
                        </h1>
                        <p className="text-gray-600">
                            –ü–æ–∫—Ä–∞—â—É–π—Ç–µ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏
                        </p>
                    </div>
                </div>
            </div>

            <div className="p-8">
                <div className="max-w-7xl mx-auto">
                    {/* Category Filter */}
                    <div className="mb-8">
                        <div className="flex items-center justify-between mb-4">
                            <h2 className="text-xl font-semibold text-gray-900">–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é</h2>
                            <button
                                onClick={() => setShowCategoryFilter(!showCategoryFilter)}
                                className="lg:hidden flex items-center text-blue-600 hover:text-blue-700 transition-colors"
                            >
                                <Filter className="w-5 h-5 mr-2" />
                                –§—ñ–ª—å—Ç—Ä
                            </button>
                        </div>

                        <div className={`${showCategoryFilter ? 'block' : 'hidden lg:block'}`}>
                            <div className="flex flex-wrap gap-5">
                                <button
                                    onClick={() => !isProcessing && !isRestarting && setSelectedCategory('all')}
                                    disabled={isProcessing || isRestarting}
                                    className={`relative px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                                        isProcessing || isRestarting
                                            ? 'cursor-not-allowed opacity-60'
                                            : 'cursor-pointer'
                                    } ${
                                        selectedCategory === 'all'
                                            ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg transform scale-105'
                                            : 'bg-white text-gray-700 hover:bg-gray-50 shadow-md hover:shadow-lg'
                                    }`}
                                >
                                    <Globe className="w-4 h-4 inline mr-2" />
                                    –í—Å—ñ –∫–∞—Ä—Ç–∫–∏
                                    <span className="ml-2 px-2 py-1 text-xs rounded-full bg-black/20">
                                        {flashcards.length}
                                    </span>
                                </button>

                                {(() => {
                                    const uncategorizedCount = flashcards.filter(c => !c.categoryId).length;
                                    const isDisabled = uncategorizedCount === 0 || isProcessing || isRestarting;

                                    return (
                                        <button
                                            onClick={() => !isDisabled && setSelectedCategory('uncategorized')}
                                            disabled={isDisabled}
                                            className={`relative px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                                                isDisabled
                                                    ? 'cursor-default opacity-60'
                                                    : 'cursor-pointer'
                                            } ${
                                                selectedCategory === 'uncategorized'
                                                    ? 'bg-gradient-to-r from-gray-600 to-gray-700 text-white shadow-lg transform scale-105'
                                                    : 'bg-white text-gray-700 hover:bg-gray-50 shadow-md hover:shadow-lg'
                                            }`}
                                        >
                                            <BookOpen className="w-4 h-4 inline mr-2" />
                                            –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                                            <span className="ml-2 px-2 py-1 text-xs rounded-full bg-black/20">
                                                {uncategorizedCount}
                                            </span>
                                        </button>
                                    );
                                })()}

                                {categories.map(category => {
                                    const totalInCategory = category.flashcardsCount || 0;
                                    const isDisabled = totalInCategory === 0 || isProcessing || isRestarting;

                                    return (
                                        <button
                                            key={category._id}
                                            onClick={() => !isDisabled && setSelectedCategory(category._id)}
                                            disabled={isDisabled}
                                            className={`relative px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                                                isDisabled
                                                    ? 'cursor-default opacity-60'
                                                    : 'cursor-pointer'
                                            } ${
                                                selectedCategory === category._id
                                                    ? 'text-white shadow-lg transform scale-105'
                                                    : 'bg-white text-gray-700 hover:bg-gray-50 shadow-md hover:shadow-lg'
                                            }`}
                                            style={{
                                                background: selectedCategory === category._id
                                                    ? `linear-gradient(135deg, ${category.color}, ${category.color}dd)`
                                                    : undefined
                                            }}
                                        >
                                            {category.name}
                                            <span className="ml-2 px-2 py-1 text-xs rounded-full bg-black/20">
                                                {totalInCategory}
                                            </span>
                                        </button>
                                    );
                                })}
                            </div>
                        </div>
                    </div>

                    {/* –°–ï–ö–¶–Ü–Ø 1: –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç */}
                    <div className="space-y-8 mb-12">
                        <div>
                            <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                                <Sparkles className="w-5 h-5 mr-2 text-emerald-500" />
                                –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
                            </h3>

                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                {quickPractice.map((practice, index) => {
                                    const isAvailable = practiceCards.length > 0;

                                    return (
                                        <div
                                            key={index}
                                            onClick={() => {
                                                if (isAvailable && !isProcessing && !isRestarting) {
                                                    handleExerciseClick(practice.exerciseType);
                                                }
                                            }}
                                            className={`relative group ${
                                                isAvailable && !isProcessing && !isRestarting
                                                    ? 'cursor-pointer'
                                                    : 'cursor-not-allowed opacity-60'
                                            }`}
                                        >
                                            <div className={`${practice.color} rounded-2xl p-6 text-white shadow-md transition-all duration-300 ${
                                                isAvailable && !isProcessing && !isRestarting ? 'hover:shadow-lg transform hover:-translate-y-2' : ''
                                            }`}>
                                                <div className="flex items-center justify-between mb-4">
                                                    <practice.icon className="w-8 h-8" />
                                                    {isAvailable && !isProcessing && !isRestarting && (
                                                        <ArrowRight className="w-5 h-5 opacity-70 group-hover:opacity-100 group-hover:translate-x-1 transition-all" />
                                                    )}
                                                </div>
                                                <h4 className="text-lg font-semibold mb-2">{practice.title}</h4>
                                                <p className="text-white/90 text-sm mb-4">{practice.description}</p>
                                                <div className="flex items-center text-sm">
                                                    <Clock className="w-4 h-4 mr-1" />
                                                    <span>{practice.time}</span>
                                                    <span className="mx-2">‚Ä¢</span>
                                                    <span>–¥–æ {practice.cards} –∫–∞—Ä—Ç–æ–∫</span>
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>

                        {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –¥–Ω—è (–ú—ñ–∫—Å–æ–≤–∞–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞) */}
                        <div>
                            <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                                <Lightbulb className="w-5 h-5 mr-2 text-blue-500" />
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –¥–Ω—è
                            </h3>
                            <div className="bg-gradient-to-t from-blue-500 to-purple-600 rounded-2xl p-8 text-white shadow-md">
                                <div className="flex items-center justify-between">
                                    <div>
                                        <h4 className="text-2xl font-bold mb-2">–ú—ñ–∫—Å–æ–≤–∞–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞</h4>
                                        <p className="text-blue-100 mb-4">
                                            –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤–ø—Ä–∞–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
                                        </p>
                                        <div className="flex items-center space-x-4 text-sm">
                                            <div className="flex items-center">
                                                <Timer className="w-4 h-4 mr-1" />
                                                10-15 —Ö–≤
                                            </div>
                                            <div className="flex items-center">
                                                <BookOpen className="w-4 h-4 mr-1" />
                                                {Math.min(15, practiceCards.length)} –∫–∞—Ä—Ç–æ–∫
                                            </div>
                                            <div className="flex items-center">
                                                <TrendingUp className="w-4 h-4 mr-1" />
                                                –í—Å—ñ —Ç–∏–ø–∏ –≤–ø—Ä–∞–≤
                                            </div>
                                        </div>
                                    </div>
                                    <button
                                        onClick={() => !isProcessing && !isRestarting && handleExerciseClick('mixed-practice')}
                                        disabled={practiceCards.length < 3 || isProcessing || isRestarting}
                                        className={`bg-white/10 hover:bg-white/20 disabled:bg-white/10 text-white px-14 py-4 rounded-xl font-semibold transition-all duration-200 flex items-center ${
                                            isProcessing || isRestarting || practiceCards.length < 3
                                                ? 'disabled:cursor-not-allowed'
                                                : 'cursor-pointer'
                                        }`}
                                    >
                                        –ü–æ—á–∞—Ç–∏
                                        <Play className="w-5 h-5 ml-2" />
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* –û–ù–û–í–õ–ï–ù–û: –°–ï–ö–¶–Ü–Ø 2: –û—Å–Ω–æ–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏ (—Ç–µ–ø–µ—Ä –∑ 4 –≤–ø—Ä–∞–≤–∞–º–∏) */}
                    <div className="mb-12">
                        <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                            <Target className="w-5 h-5 mr-2 text-blue-500" />
                            –û—Å–Ω–æ–≤–Ω—ñ –≤–ø—Ä–∞–≤–∏
                        </h3>
                        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-2 gap-8"> {/* –ó–ú–Ü–ù–ï–ù–û: —Å—ñ—Ç–∫–∞ 2x2 –∑–∞–º—ñ—Å—Ç—å 3 –∫–æ–ª–æ–Ω–æ–∫ */}
                            {coreExercisesData.map((exercise) => {
                                const isAvailable = practiceCards.length >= exercise.minCards;
                                const Icon = exercise.icon;

                                return (
                                    <div
                                        key={exercise.id}
                                        onClick={() => isAvailable && !isProcessing && !isRestarting && handleExerciseClick(exercise.id)}
                                        className={`group relative bg-white rounded-2xl p-8 shadow-md hover:shadow-lg transition-all duration-300 flex flex-col justify-between ${
                                            isAvailable && !isProcessing && !isRestarting
                                                ? 'cursor-pointer hover:-translate-y-2'
                                                : 'opacity-60 cursor-not-allowed'
                                        }`}
                                    >
                                        <div>
                                            <div className={`absolute inset-0 bg-gradient-to-br ${exercise.color} opacity-0 group-hover:opacity-10 transition-opacity duration-300 rounded-2xl`} />

                                            <div className={`w-16 h-16 bg-gradient-to-br ${exercise.color} rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300`}>
                                                <Icon className="w-8 h-8 text-white" />
                                            </div>

                                            <div className="flex items-center justify-between mb-3">
                                                <h4 className="text-xl font-bold text-gray-900">{exercise.title}</h4>
                                                <ChevronRight className="w-5 h-5 text-gray-400 group-hover:text-blue-600 group-hover:translate-x-1 transition-all" />
                                            </div>

                                            <p className="text-gray-600 mb-6">{exercise.description}</p>
                                        </div>

                                        <div className="relative">
                                            <div className="flex items-center space-x-4 mb-6 text-sm">
                                                <div className={`flex items-center ${exercise.difficultyColor}`}>
                                                    <span className={`w-2 h-2 ${exercise.difficultyBg} rounded-full mr-2`} />
                                                    {exercise.difficulty}
                                                </div>
                                                <div className="flex items-center text-blue-600">
                                                    <Clock className="w-4 h-4 mr-1" />
                                                    {exercise.time}
                                                </div>
                                            </div>

                                            <div className="space-y-2 mb-6">
                                                {exercise.features.map((feature, index) => (
                                                    <div key={index} className="flex items-center text-sm text-gray-600">
                                                        <span className="w-1.5 h-1.5 bg-blue-400 rounded-full mr-3" />
                                                        {feature}
                                                    </div>
                                                ))}
                                            </div>

                                            {isAvailable ? (
                                                <div className="flex items-center justify-between">
                                                    <span className="text-sm text-gray-500">
                                                        {practiceCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ
                                                    </span>
                                                    <div className={`px-4 py-2 bg-gradient-to-r ${exercise.color} text-white rounded-lg text-sm font-medium`}>
                                                        –ü–æ—á–∞—Ç–∏
                                                    </div>
                                                </div>
                                            ) : (
                                                <div className="text-sm text-pink-500">
                                                    –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º {exercise.minCards} –∫–∞—Ä—Ç–æ–∫
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </div>

                    {/* –°–ï–ö–¶–Ü–Ø 3: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–ø—Ä–∞–≤–∏ */}
                    <div className="mb-12">
                        <h3 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                            <Layers className="w-5 h-5 mr-2 text-purple-500" />
                            –î–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–ø—Ä–∞–≤–∏
                        </h3>

                        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8">
                            {advancedExercisesData.map((exercise) => {
                                const isAvailable = practiceCards.length >= exercise.minCards;
                                const Icon = exercise.icon;

                                return (
                                    <div
                                        key={exercise.id}
                                        onClick={() => isAvailable && !isProcessing && !isRestarting && handleExerciseClick(exercise.id)}
                                        className={`group relative bg-white rounded-2xl p-8 shadow-md hover:shadow-lg transition-all duration-300 flex flex-col justify-between ${
                                            isAvailable && !isProcessing && !isRestarting
                                                ? 'cursor-pointer hover:-translate-y-2'
                                                : 'opacity-60 cursor-not-allowed'
                                        }`}
                                    >
                                        <div>
                                            <div className={`absolute inset-0 bg-gradient-to-br ${exercise.color} opacity-0 group-hover:opacity-10 transition-opacity duration-300 rounded-2xl`} />

                                            <div className={`w-16 h-16 bg-gradient-to-br ${exercise.color} rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300`}>
                                                <Icon className="w-8 h-8 text-white" />
                                            </div>

                                            <div className="flex items-center justify-between mb-3">
                                                <h4 className="text-xl font-bold text-gray-900">{exercise.title}</h4>
                                                <ChevronRight className="w-5 h-5 text-gray-400 group-hover:text-purple-600 group-hover:translate-x-1 transition-all" />
                                            </div>

                                            <p className="text-gray-600 mb-6">{exercise.description}</p>
                                        </div>

                                        <div className="relative">
                                            <div className="flex items-center space-x-4 mb-6 text-sm">
                                                <div className={`flex items-center ${exercise.difficultyColor}`}>
                                                    <span className={`w-2 h-2 ${exercise.difficultyBg} rounded-full mr-2`} />
                                                    {exercise.difficulty}
                                                </div>
                                                <div className="flex items-center text-purple-600">
                                                    <Clock className="w-4 h-4 mr-1" />
                                                    {exercise.time}
                                                </div>
                                            </div>

                                            <div className="space-y-2 mb-6">
                                                {exercise.features.map((feature, index) => (
                                                    <div key={index} className="flex items-center text-sm text-gray-600">
                                                        <span className="w-1.5 h-1.5 bg-purple-400 rounded-full mr-3" />
                                                        {feature}
                                                    </div>
                                                ))}
                                            </div>

                                            {isAvailable ? (
                                                <div className="flex items-center justify-between">
                                                    <span className="text-sm text-gray-500">
                                                        {practiceCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ
                                                    </span>
                                                    <div className={`px-4 py-2 bg-gradient-to-r ${exercise.color} text-white rounded-lg text-sm font-medium`}>
                                                        –ü–æ—á–∞—Ç–∏
                                                    </div>
                                                </div>
                                            ) : (
                                                <div className="text-sm text-pink-500">
                                                    –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º {exercise.minCards} –∫–∞—Ä—Ç–æ–∫
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                    </div>

                    {/* –î–û–î–ê–ù–û: –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó */}
                    <div className="border-t border-gray-200 pt-8">
                        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                    <div className="bg-gradient-to-r from-blue-500 to-indigo-600 w-12 h-12 rounded-xl flex items-center justify-center mr-4">
                                        <Download className="w-6 h-6 text-white" />
                                    </div>
                                    <div>
                                        <h4 className="text-lg font-semibold text-gray-900 mb-1">
                                            –û–Ω–æ–≤–∏—Ç–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó
                                        </h4>
                                        <p className="text-sm text-gray-600">
                                            –û–Ω–æ–≤—ñ—Ç—å –≤—Å—ñ –≤–∞—à—ñ —Ñ–ª–µ—à–∫–∞—Ä—Ç–∫–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
                                        </p>
                                    </div>
                                </div>
                                <button
                                    onClick={handleMigrateFlashcards}
                                    disabled={isMigrating || isProcessing || isRestarting || flashcards.length === 0}
                                    className={`flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                                        isMigrating || isProcessing || isRestarting || flashcards.length === 0
                                            ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                                            : 'bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700 hover:shadow-lg cursor-pointer'
                                    }`}
                                >
                                    {isMigrating ? (
                                        <>
                                            <Loader className="w-5 h-5 mr-2 animate-spin" />
                                            –û–Ω–æ–≤–ª—é—é...
                                        </>
                                    ) : (
                                        <>
                                            <Download className="w-5 h-5 mr-2" />
                                            –û–Ω–æ–≤–∏—Ç–∏
                                        </>
                                    )}
                                </button>
                            </div>
                            {flashcards.length === 0 && (
                                <div className="mt-3 text-sm text-amber-600 bg-amber-50 px-3 py-2 rounded-lg">
                                    <span className="flex items-center">
                                        <Clock className="w-4 h-4 mr-2" />
                                        –ù–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                                    </span>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PracticePage;